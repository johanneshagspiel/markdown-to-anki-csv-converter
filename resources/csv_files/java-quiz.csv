"<b> Given the string ""strawberries"" saved in a variable called fruit, what would `fruit.substring(</b><br><ul><li>rawb</li><li>raw</li><li>awb</li><li>traw</li></ul>","raw<br><br>**Reasoning:** The substring method is accepting two arguments.<br>- The first argument being the index to start(includes that char at 2)<br>- and the second the index of the string to end the substring(excludes the char at 5).<br>- Strings in Java are like arrays of chars.<br>- Therefore, the method will return ""raw"" as those are the chars in indexes 2,3, and 4.<br>- You can also take the ending index and subtract the beginning index from it, to determine how many chars will be included in the substring (5-2=3).<br>"
<b> How can you achieve runtime polymorphism in Java?</b><br><ul><li>method overloading</li><li>method overrunning</li><li>method overriding</li><li>method calling</li></ul>,method overriding
"<b> Given the following definitions, which of these expression will **NOT** evaluate to true?</b><br><br>`boolean b1 = true, b2 = false; int i1 = 1, i2 = 2;`<br><br><ul><li>`(i1 | i2) == 3`</li><li>`i2 && b1`</li><li>`b1 || !b2`</li><li>`(i1 ^ i2) < 4`</li></ul>",`i2 && b1`
"<b> What is the output of this code?</b><br><br>```java<br>1: class Main {<br>2:   public static void main (String[] args) {<br>3:     int array[] = {1, 2, 3, 4};<br>4:     for (int i = 0; i < array.size(); i++) {<br>5:        System.out.print(array[i]);<br>6:     }<br>7:   }<br>8: }<br>```<br><br><ul><li>It will not compile because of line 4.</li><li>It will not compile because of line 3.</li><li>123</li><li>1234</li></ul>",It will not compile because of line 4.
"<b> Which of the following can replace the CODE SNIPPET to make the code below print ""Hello World""?</b><br><br>```java<br>interface Interface1 {<br>static void print() {<br>System.out.print(""Hello"");<br>}<br>}<br>interface Interface2 {<br>static void print() {<br>System.out.print(""World!"");<br>}<br>}<br>```<br><br><ul><li>`super1.print(); super2.print();`</li><li>`this.print();`</li><li>`super.print();`</li><li>`Interface1.print(); Interface2.print();`</li></ul>",`Interface1.print(); Interface2.print();`
"<b> What does the following code print?</b><br><br>```java<br>String str = ""abcde"";<br>str.trim();<br>str.toUpperCase();<br>str.substring(3, 4);<br>System.out.println(str);<br>```<br><br><ul><li>CD</li><li>CDE</li><li>D</li><li>""abcde""</li></ul>","""abcde"""
"<b> What is the result of this code?</b><br><br>```java<br>class Main {<br>public static void main (String[] args){<br>System.out.println(print(1));<br>}<br>static Exception print(int i){<br>if (i>0) {<br>return new Exception();<br>} else {<br>throw new RuntimeException();<br>}<br>}<br>}<br>```<br><br><ul><li>It will show a stack trace with a runtime exception.</li><li>""java.lang.Exception""</li><li>It will run and throw an exception.</li><li>It will not compile.</li></ul>","""java.lang.Exception"""
"<b> Which class can compile given these declarations?</b><br><br>```java<br>interface One {<br>default void method() {<br>System.out.println(""One"");<br>}<br>}<br>interface Two {<br>default void method () {<br>System.out.println(""One"");<br>}<br>}<br>```<br><br><ul><li>A```java<br>class Three implements One, Two {<br>public void method() {<br>super.One.method();<br>}<br>}<br>```<br></li><li>B```java<br>class Three implements One, Two {<br>public void method() {<br>One.method();<br>}<br>}<br>```<br></li><li>C```java<br>class Three implements One, Two {<br>}<br>```<br></li><li>D```java<br>class Three implements One, Two {<br>public void method() {<br>One.super.method();<br>}<br>}<br>```<br></li></ul>","D```java<br>class Three implements One, Two {<br>public void method() {<br>One.super.method();<br>}<br>}<br>```<br>"
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>public static void main (String[] args) {<br>List list = new ArrayList();<br>list.add(""hello"");<br>list.add(2);<br>System.out.print(list.get(0) instanceof Object);<br>System.out.print(list.get(1) instanceof Integer);<br>}<br>}<br>```<br><br><ul><li>The code does not compile.</li><li>truefalse</li><li>truetrue</li><li>falsetrue</li></ul>",truetrue
"<b> Given the following two classes, what will be the output of the Main class?</b><br><br>```java<br>package mypackage;<br>public class Math {<br>public static int abs(int num){<br>return num < 0 ? -num : num;<br>}<br>}<br>package mypackage.elementary;<br>public class Math {<br>public static int abs (int num) {<br>return -num;<br>}<br>}<br>```<br>```java<br>import mypackage.Math;<br>import mypackage.elementary.*;<br>class Main {<br>public static void main (String args[]){<br>System.out.println(Math.abs(123));<br>}<br>}<br>```<br><br><ul><li>Lines 1 and 2 generate compiler errors due to class name conflicts.</li><li>""-123""</li><li>It will throw an exception on line 5.</li><li>""123""</li></ul>","""123""<br><br>**Explanation:** The answer is ""123"". The `abs()` method evaluates to the one inside mypackage.Math class, because The import statements of the form:<br>`import packageName.subPackage.*`<br>is [Type-Import-on-Demand Declarations](https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5.2), which [never causes any other declaration to be shadowed](https://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.4.1).<br>"
"<b> What is the result of this code?</b><br><br>```java<br>1: class MainClass {<br>2:  final String message(){<br>3:      return ""Hello!"";<br>4:  }<br>5: }<br>6: class Main extends MainClass {<br>7:  public static void main(String[] args) {<br>8:      System.out.println(message());<br>9:  }<br>10: String message(){<br>11:     return ""World!"";<br>12:  }<br>13: }<br>```<br><br><ul><li>It will not compile because of line 10.</li><li>""Hello!""</li><li>It will not compile because of line 2.</li><li>""World!""</li></ul>","It will not compile because of line 10.<br><br>**Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.<br>"
"<b> Given this code, which command will output ""</b><br><br>```java<br>class Main {<br>public static void main(String[] args) {<br>System.out.println(args[2]);<br>}<br>}<br>```<br><br><ul><li>`java Main 1 2 ""3 4"" 5`</li><li>`java Main 1 ""2"" ""2"" 5`</li><li>`java Main.class 1 ""2"" 2 5`</li><li>`java Main 1 ""2"" ""3 4"" 5`</li></ul>","`java Main 1 ""2"" ""2"" 5`"
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>public static void main(String[] args){<br>int a = 123451234512345;<br>System.out.println(a);<br>}<br>}<br>```<br><br><ul><li>""123451234512345""</li><li>Nothing - this will not compile.</li><li>a negative integer value</li><li>""12345100000""</li></ul>","Nothing - this will not compile.<br><br>**Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.<br>"
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>public static void main (String[] args) {<br>String message = ""Hello world!"";<br>String newMessage = message.substring(6, 12)<br>+ message.substring(12, 6);<br>System.out.println(newMessage);<br>}<br>}<br>```<br><br><ul><li>The code does not compile.</li><li>A runtime exception is thrown.</li><li>""world!!world""</li><li>""world!world!""</li></ul>",A runtime exception is thrown.
<b> How do you write a foreach loop that will iterate over ArrayList\<Pencil\>pencilCase?</b><br><ul><li>`for (Pencil pencil : pencilCase) {}`</li><li>`for (pencilCase.next()) {}`</li><li>`for (Pencil pencil : pencilCase.iterator()) {}`</li><li>`for (pencil in pencilCase) {}`</li></ul>,`for (Pencil pencil : pencilCase) {}`
"<b> What does this code print?</b><br><br>```java<br>System.out.print(""apple"".compareTo(""banana""));<br>```<br><br><ul><li>`0`</li><li>positive number</li><li>negative number</li><li>compilation error</li></ul>",negative number
"<b> You have an ArrayList of names that you want to sort alphabetically. Which approach would **NOT** work?</b><br><ul><li>`names.sort(Comparator.comparing(String::toString))`</li><li>`Collections.sort(names)`</li><li>`names.sort(List.DESCENDING)`</li><li>`names.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())`</li></ul>",`names.sort(List.DESCENDING)`
"<b> By implementing encapsulation, you cannot directly access the class's \_ properties unless you are writing code inside the class itself.</b><br><ul><li>private</li><li>protected</li><li>no-modifier</li><li>public</li></ul>",private
"<b> Which is the most up-to-date way to instantiate the current date?</b><br><ul><li>`new SimpleDateFormat(""yyyy-MM-dd"").format(new Date())`</li><li>`new Date(System.currentTimeMillis())`</li><li>`LocalDate.now()`</li><li>`Calendar.getInstance().getTime()`</li></ul>",`LocalDate.now()`<br><br>**Explanation**: LocalDate is the newest class added in java 8<br>
"<b> Fill in the blank to create a piece of code that will tell whether `int</b><br><br>`boolean isDivisibleBy5 = _____`<br><br><ul><li>`int0 / 5 ? true: false`</li><li>`int0 % 5 == 0`</li><li>`int0 % 5 != 5`</li><li>`Math.isDivisible(int0, 5)`</li></ul>",`int0 % 5 == 0`
"<b> How many times will this code print ""Hello World!""?</b><br><br>```java<br>class Main {<br>public static void main(String[] args){<br>for (int i=0; i<10; i=i++){<br>i+=1;<br>System.out.println(""Hello World!"");<br>}<br>}<br>}<br>```<br><br><ul><li>10 times</li><li>9 times</li><li>5 times</li><li>infinite number of times</li></ul>","10 times<br><br>**Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).<br>"
<b> The runtime system starts your program by calling which function first?</b><br><ul><li>print</li><li>iterative</li><li>hello</li><li>main</li></ul>,main
"<b> What code would you use in Constructor A to call Constructor B?</b><br><br>```java<br>public class Jedi {<br>/* Constructor A */<br>Jedi(String name, String species){}<br>/* Constructor B */<br>Jedi(String name, String species, boolean followsTheDarkSide){}<br>}<br>```<br><br><ul><li>Jedi(name, species, false)</li><li>new Jedi(name, species, false)</li><li>this(name, species, false)</li><li>super(name, species, false)</li></ul>","this(name, species, false)<br><br>**Note:** This code won't compile, possibly broken code sample.<br>"
<b> Which statement is **NOT** true?</b><br><ul><li>An anonymous class may specify an abstract base class as its base type.</li><li>An anonymous class does not require a zero-argument constructor.</li><li>An anonymous class may specify an interface as its base type.</li><li>An anonymous class may specify both an abstract class and interface as base types.</li></ul>,An anonymous class does not require a zero-argument constructor.
"<b> What will this program print out to the console when executed?</b><br><br>```java<br>import java.util.LinkedList;<br>public class Main {<br>public static void main(String[] args){<br>LinkedList<Integer> list = new LinkedList<>();<br>list.add(5);<br>list.add(1);<br>list.add(10);<br>System.out.println(list);<br>}<br>}<br>```<br><br><ul><li>[5, 1, 10]</li><li>[10, 5, 1]</li><li>[1, 5, 10]</li><li>[10, 1, 5]</li></ul>","[5, 1, 10]"
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>public static void main(String[] args){<br>String message = ""Hello"";<br>for (int i = 0; i<message.length(); i++){<br>System.out.print(message.charAt(i+1));<br>}<br>}<br>}<br>```<br><br><ul><li>""Hello""</li><li>A runtime exception is thrown.</li><li>The code does not compile.</li><li>""ello""</li></ul>",A runtime exception is thrown.
<b> Object-oriented programming is a style of programming where you organize your program around \_ rather than \_ and data rather than logic.</b><br><ul><li>functions; actions</li><li>objects; actions</li><li>actions; functions</li><li>actions; objects</li></ul>,objects; actions
"<b> What statement returns true if ""nifty"" is of type String?</b><br><ul><li>`""nifty"".getType().equals(""String"")`</li><li>`""nifty"".getType() == String`</li><li>`""nifty"".getClass().getSimpleName() == ""String""`</li><li>`""nifty"" instanceof String`</li></ul>","`""nifty"" instanceof String`"
"<b> What is the output of this code?</b><br><br>```java<br>import java.util.*;<br>class Main {<br>public static void main(String[] args) {<br>List<Boolean> list = new ArrayList<>();<br>list.add(true);<br>list.add(Boolean.parseBoolean(""FalSe""));<br>list.add(Boolean.TRUE);<br>System.out.print(list.size());<br>System.out.print(list.get(1) instanceof Boolean);<br>}<br>}<br>```<br><br><ul><li>A runtime exception is thrown.</li><li>3false</li><li>2true</li><li>3true</li></ul>",3true
"<b> What is the result of this code?</b><br><br>```java<br>1: class Main {<br>2: 	Object message(){<br>3: 		return ""Hello!"";<br>4: 	}<br>5: 	public static void main(String[] args) {<br>6: 		System.out.print(new Main().message());<br>7: 		System.out.print(new Main2().message());<br>8: 	}<br>9: }<br>10: class Main2 extends Main {<br>11: 	String message(){<br>12: 		return ""World!"";<br>13: 	}<br>14: }<br>```<br><br><ul><li>It will not compile because of line 7.</li><li>Hello!Hello!</li><li>Hello!World!</li><li>It will not compile because of line 11.</li></ul>",Hello!World!
<b> What method can be used to create a new instance of an object?</b><br><ul><li>another instance</li><li>field</li><li>constructor</li><li>private method</li></ul>,constructor
<b> Which is the most reliable expression for testing whether the values of two string variables are the same?</b><br><ul><li>string1 == string2</li><li>string1 = string2</li><li>string1.matches(string2)</li><li>string1.equals(string2)</li></ul>,string1.equals(string2)
"<b> Which letters will print when this code is run?</b><br><br>```java<br>public static void main(String[] args) {<br>try {<br>System.out.println(""A"");<br>badMethod();<br>System.out.println(""B"");<br>} catch (Exception ex) {<br>System.out.println(""C"");<br>} finally {<br>System.out.println(""D"");<br>}<br>}<br>public static void badMethod() {<br>throw new Error();<br>}<br>```<br><br><ul><li>A, B, and D</li><li>A, C, and D</li><li>C and D</li><li>A and D</li></ul>",A and D<br><br>**Explanation**: `Error` is not inherited from `Exception`<br>
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>static int count = 0;<br>public static void main(String[] args) {<br>if (count < 3) {<br>count++;<br>main(null);<br>} else {<br>return;<br>}<br>System.out.println(""Hello World!"");<br>}<br>}<br>```<br><br><ul><li>It will throw a runtime exception.</li><li>It will not compile.</li><li>It will print ""Hello World!"" three times.</li><li>It will run forever.</li></ul>","It will print ""Hello World!"" three times."
"<b> What is the output of this code?</b><br><br>```java<br>import java.util.*;<br>class Main {<br>public static void main(String[] args) {<br>String[] array = {""abc"", ""2"", ""10"", ""0""};<br>List<String> list = Arrays.asList(array);<br>Collections.sort(list);<br>System.out.println(Arrays.toString(array));<br>}<br>}<br>```<br><br><ul><li>`[abc, 0, 2, 10]`</li><li>The code does not compile.</li><li>`[abc, 2, 10, 0]`</li><li>`[0, 10, 2, abc]`</li></ul>","`[0, 10, 2, abc]`<br><br>**Explanation**: The `java.util.Arrays.asList(T... a)` returns a fixed-size list backed by the specified array. (Changes to the returned list ""write through"" to the array.)<br>"
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>public static void main(String[] args) {<br>String message = ""Hello"";<br>print(message);<br>message += ""World!"";<br>print(message);<br>}<br>static void print(String message){<br>System.out.print(message);<br>message += "" "";<br>}<br>}<br>```<br><br><ul><li>Hello World!</li><li>HelloHelloWorld!</li><li>Hello Hello World!</li><li>Hello HelloWorld!</li></ul>",HelloHelloWorld!
<b> What is displayed when this code is compiled and executed?</b><br><br>```java<br>public class Main {<br>public static void main(String[] args) {<br>int x = 5;<br>x = 10;<br>System.out.println(x);<br>}<br>}<br>```<br><br><ul><li>x</li><li>null</li><li>10</li><li>5</li></ul>,10
<b> Which approach cannot be used to iterate over a List named _theList_?</b><br><ul><li>A```java<br>for (int i = 0; i < theList.size(); i++) {<br>System.out.println(theList.get(i));<br>}<br>```<br></li><li>B```java<br>for (Object object : theList) {<br>System.out.println(object);<br>}<br>```<br></li><li>C```java<br>Iterator it = theList.iterator();<br>for (it.hasNext()) {<br>System.out.println(it.next());<br>}<br>```<br></li><li>D```java<br>theList.forEach(System.out::println);<br>```<br></li></ul>,C```java<br>Iterator it = theList.iterator();<br>for (it.hasNext()) {<br>System.out.println(it.next());<br>}<br>```<br><br><br>**Explanation:** `for (it.hasNext())` should be `while (it.hasNext())`.<br>
"<b> What method signature will work with this code?</b><br><br>`boolean healthyOrNot = isHealthy(""avocado"");`<br><br><ul><li>public void isHealthy(String avocado)</li><li>boolean isHealthy(String string)</li><li>public isHealthy(""avocado"")</li><li>private String isHealthy(String food)</li></ul>",boolean isHealthy(String string)
"<b> Which are valid keywords in a Java module descriptor (module-info.java)?</b><br><ul><li>provides, employs</li><li>imports, exports</li><li>consumes, supplies</li><li>requires, exports</li></ul>","requires, exports"
<b> Which type of variable keeps a constant value once it is assigned?</b><br><ul><li>non-static</li><li>static</li><li>final</li><li>private</li></ul>,final
<b> How does the keyword `volatile` affect how a variable is handled?</b><br><ul><li>It will be read by only one thread at a time.</li><li>It will be stored on the hard drive.</li><li>It will never be cached by the CPU.</li><li>It will be preferentially garbage collected.</li></ul>,It will never be cached by the CPU.
<b> What is the result of this code?</b><br><br>```java<br>char smooch = 'x';<br>System.out.println((int) smooch);<br>```<br><br><ul><li>an alphanumeric character</li><li>a negative number</li><li>a positive number</li><li>a ClassCastException</li></ul>,a positive number
<b> You get a NullPointerException. What is the most likely cause?</b><br><ul><li>A file that needs to be opened cannot be found.</li><li>A network connection has been lost in the middle of communications.</li><li>Your code has used up all available memory.</li><li>The object you are using has not been instantiated.</li></ul>,The object you are using has not been instantiated.
"<b> How would you fix this code so that it compiles?</b><br><br>```java<br>public class Nosey {<br>int age;<br>public static void main(String[] args) {<br>System.out.println(""Your age is: "" + age);<br>}<br>}<br>```<br><br><ul><li>Make age static.</li><li>Make age global.</li><li>Make age public.</li><li>Initialize age to a number.</li></ul>",Make age static.
"<b> Add a Duck called ""Waddles"" to the ArrayList **ducks**.</b><br><br>```java<br>public class Duck {<br>private String name;<br>Duck(String name) {}<br>}<br>```<br><br><ul><li>`Duck waddles = new Duck();``ducks.add(waddles);`<br></li><li>`Duck duck = new Duck(""Waddles"");``ducks.add(waddles);`<br></li><li>`ducks.add(new Duck(""Waddles""));`</li><li>`ducks.add(new Waddles());`</li></ul>","`ducks.add(new Duck(""Waddles""));`"
"<b> If you encounter `UnsupportedClassVersionError` it means the code was `___` on a newer version of Java than the JRE `___` it.</b><br><ul><li>executed; interpreting</li><li>executed; compiling</li><li>compiled; executing</li><li>compiled, translating</li></ul>",compiled; executing
"<b> Given this class, how would you make the code compile?</b><br><br>```java<br>public class TheClass {<br>private final int x;<br>}<br>```<br><br><ul><li>A```java<br>public TheClass() {<br>x += 77;<br>}<br>```<br></li><li>B```java<br>public TheClass() {<br>x = null;<br>}<br>```<br></li><li>C```java<br>public TheClass() {<br>x = 77;<br>}<br>```<br></li><li>D```java<br>private void setX(int x) {<br>this.x = x;<br>}<br>public TheClass() {<br>setX(77);<br>}<br>```<br></li></ul>","C```java<br>public TheClass() {<br>x = 77;<br>}<br>```<br><br><br>**Explanation:** `final` class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.<br>"
"<b> How many times f will be printed?</b><br><br>```java<br>public class Solution {<br>public static void main(String[] args) {<br>for (int i = 44; i > 40; i--) {<br>System.out.println(""f"");<br>}<br>}<br>}<br>```<br><br><ul><li>4</li><li>3</li><li>5</li><li>A Runtime exception will be thrown</li></ul>",4
"<b> Which statements about `abstract` classes are true?</b><br><br>```<br>1. They can be instantiated.<br>2. They allow member variables and methods to be inherited by subclasses.<br>3. They can contain constructors.<br>```<br><br><ul><li>1, 2, and 3</li><li>only 3</li><li>2 and 3</li><li>only 2</li></ul>",2 and 3
<b> Which keyword lets you call the constructor of a parent class?</b><br><ul><li>parent</li><li>super</li><li>this</li><li>new</li></ul>,super
<b> What is the result of this code?</b><br><br>```java<br>1: int a = 1;<br>2: int b = 0;<br>3: int c = a/b;<br>4: System.out.println(c);<br>```<br><br><ul><li>It will throw an ArithmeticException.</li><li>It will run and output 0.</li><li>It will not compile because of line 3.</li><li>It will run and output infinity.</li></ul>,It will throw an ArithmeticException.
"<b> Normally, to access a static member of a class such as Math.PI, you would need to specify the class ""Math"". What would be the best way to allow you to use simply ""PI"" in your code?</b><br><ul><li>Add a static import.</li><li>Declare local copies of the constant in your code.</li><li>This cannot be done. You must always qualify references to static members with the class form which they came from.</li><li>Put the static members in an interface and inherit from that interface.</li></ul>",Add a static import.
<b> Which keyword lets you use an interface?</b><br><ul><li>extends</li><li>implements</li><li>inherits</li><li>import</li></ul>,implements
<b> Why are ArrayLists better than arrays?</b><br><ul><li>You don't have to decide the size of an ArrayList when you first make it.</li><li>You can put more items into an ArrayList than into an array.</li><li>ArrayLists can hold more kinds of objects than arrays.</li><li>You don't have to decide the type of an ArrayList when you first make it.</li></ul>,You don't have to decide the size of an ArrayList when you first make it.
<b> Declare a variable that holds the first four digits of Π</b><br><ul><li>int pi = 3.141;</li><li>decimal pi = 3.141;</li><li>double pi = 3.141;</li><li>float pi = 3.141;</li></ul>,"double pi = 3.141;<br><br>**Reasoning:**<br>```java<br>public class TestReal {<br>public static void main (String[] argv)<br>{<br>double pi = 3.14159265;       //accuracy up to 15 digits<br>float pi2 = 3.141F;           //accuracy up to 6-7 digits<br>System.out.println (""Pi="" + pi);<br>System.out.println (""Pi2="" + pi2);<br>}<br>}<br>```<br>```<br>The default Java type which Java will be using for a float variable will be double.<br>So, even if you declare any variable as float, what the compiler has to actually do is to assign a double value to a float variable,<br>which is not possible. So, to tell the compiler to treat this value as a float, that 'F' is used.<br>```<br>"
"<b> Use the magic power to cast a spell</b><br><br>```java<br>public class MagicPower {<br>void castSpell(String spell) {}<br>}<br>```<br><br><ul><li>`new MagicPower().castSpell(""expecto patronum"")`</li><li>`MagicPower magicPower = new MagicPower();``magicPower.castSpell();`<br></li><li>`MagicPower.castSpell(""expelliarmus"");`</li><li>`new MagicPower.castSpell();`</li></ul>","`new MagicPower().castSpell(""expecto patronum"")`"
<b> What language construct serves as a blueprint containing an object's properties and functionality?</b><br><ul><li>constructor</li><li>instance</li><li>class</li><li>method</li></ul>,class
"<b> What does this code print?</b><br><br>```java<br>public static void main(String[] args) {<br>int x=5,y=10;<br>swapsies(x,y);<br>System.out.println(x+"" ""+y);<br>}<br>static void swapsies(int a, int b) {<br>int temp=a;<br>a=b;<br>b=temp;<br>}<br>```<br><br><ul><li>10 10</li><li>5 10</li><li>10 5</li><li>5 5</li></ul>",5 10
"<b> What is the result of this code?</b><br><br>```java<br>try {<br>System.out.println(""Hello World"");<br>} catch (Exception e) {<br>System.out.println(""e"");<br>} catch (ArithmeticException e) {<br>System.out.println(""e"");<br>} finally {<br>System.out.println(""!"");<br>}<br>```<br><br><ul><li>Hello World</li><li>It will not compile because the second catch statement is unreachable</li><li>Hello World!</li><li>It will throw runtime exception</li></ul>",It will not compile because the second catch statement is unreachable
<b> Which is not a java keyword</b><br><ul><li>finally</li><li>native</li><li>interface</li><li>unsigned</li></ul>,unsigned<br><br>**Explanation:** `native` is a part of JNI interface<br>
<b> Which operator would you use to find the remainder after division?</b><br><ul><li>`%`</li><li>`//`</li><li>`/`</li><li>`DIV`</li></ul>,`%`<br><br>[Reference](http://www.cs.ukzn.ac.za/~hughm/java/intro/week2/21.html)<br>
<b> Which choice is a disadvantage of inheritance?</b><br><ul><li>Overridden methods of the parent class cannot be reused.</li><li>Responsibilities are not evenly distributed between parent and child classes.</li><li>Classes related by inheritance are tightly coupled to each other.</li><li>The internal state of the parent class is accessible to its children.</li></ul>,"Classes related by inheritance are tightly coupled to each other.<br><br>[Reference](http://erpbasic.blogspot.com/2012/01/inheritance-advantages-and.html#:~:text=Main%20disadvantage%20of%20using%20inheritance,used%20independent%20of%20each%20other.&text=4.,case%20of%20using%20that%20method.)<br>"
<b> Declare and initialize an array of </b><br><ul><li>`Array<Integer> numbers = new Array<Integer>(10);`</li><li>`Array[int] numbers = new Array[int](10);`</li><li>`int[] numbers = new int[10];`</li><li>`int numbers[] = int[10];`</li></ul>,`int[] numbers = new int[10];`
"<b> Refactor this event handler to a lambda expression:</b><br><br>```java<br>groucyButton.addActionListener(new ActionListener() {<br>@Override<br>public void actionPerformed(ActionEvent e) {<br>System.out.println(""Press me one more time.."");<br>}<br>});<br>```<br><br><ul><li>`groucyButton.addActionListener(ActionListener listener -> System.out.println(""Press me one more time...""));`</li><li>`groucyButton.addActionListener((event) -> System.out.println(""Press me one more time...""));`</li><li>`groucyButton.addActionListener(new ActionListener(ActionEvent e) {() -> System.out.println(""Press me one more time..."");});`</li><li>`groucyButton.addActionListener(() -> System.out.println(""Press me one more time...""));`</li></ul>","`groucyButton.addActionListener((event) -> System.out.println(""Press me one more time...""));`<br><br>[Reference](https://www.codejava.net/java-core/the-java-language/java-8-lambda-listener-example)<br>"
"<b> Which functional interfaces does Java provide to serve as data types for lambda expressions?</b><br><ul><li>Observer, Observable</li><li>Collector, Builder</li><li>Filter, Map, Reduce</li><li>Consumer, Predicate, Supplier</li></ul>","Consumer, Predicate, Supplier<br><br>[Reference](https://www.baeldung.com/java-8-functional-interfaces)<br>"
<b> What is a valid use of the hashCode() method?</b><br><ul><li>encrypting user passwords</li><li>deciding if two instances of a class are equal</li><li>enabling HashMap to find matches faster</li><li>moving objects from a List to a HashMap</li></ul>,deciding if two instances of a class are equal<br><br>[Reference](https://www.baeldung.com/java-hashcode)<br>
"<b> What kind of relationship does ""extends"" denote?</b><br><ul><li>uses-a</li><li>is-a</li><li>has-a</li><li>was-a</li></ul>",is-a<br><br>[Reference](https://www.c-sharpcorner.com/UploadFile/3614a6/is-a-and-has-a-relationship-in-java/)<br>
<b> How do you force an object to be garbage collected?</b><br><ul><li>Set object to null and call Runtime.gc()</li><li>Set object to null and call System.gc()</li><li>Set object to null and call Runtime.getRuntime().runFinalization()</li><li>There is no way to force an object to be garbage collected</li></ul>,Set object to null and call System.gc()<br><br>[Reference](https://sematext.com/blog/java-garbage-collection/)<br>
"<b> Java programmers commonly use design patterns. Some examples are the **\_**, which helps create instances of a class, the **\_**, which ensures that only one instance of a class can be created; and the **\_**, which allows for a group of algorithms to be interchangeable.</b><br><ul><li>static factory method; singleton; strategy pattern</li><li>strategy pattern; static factory method; singleton</li><li>creation pattern; singleton; prototype pattern</li><li>singleton; strategy pattern; static factory method</li></ul>",static factory method; singleton; strategy pattern
"<b> Using Java's Reflection API, you can use \_ to get the name of a class and \_ to retrieve an array of its methods.</b><br><ul><li>this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()</li><li>this.getName(); this.getMethods()</li><li>Reflection.getName(this); Reflection.getMethods(this)</li><li>Reflection.getClass(this).getName(); Reflection.getClass(this).getMethods()</li></ul>",this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()
<b> Which is not a valid lambda expression?</b><br><ul><li>`a -> false;`</li><li>`(a) -> false;`</li><li>`String a -> false;`</li><li>`(String a) -> false;`</li></ul>,`String a -> false;`
<b> Which access modifier makes variables and methods visible only in the class where they are declared?</b><br><ul><li>public</li><li>protected</li><li>nonmodifier</li><li>private</li></ul>,private
<b> What type of variable can be assigned to only once?</b><br><ul><li>private</li><li>non-static</li><li>final</li><li>static</li></ul>,final
"<b> How would you convert a String to an Int?</b><br><ul><li>`""21"".intValue()`</li><li>`String.toInt(""21"")`</li><li>`Integer.parseInt(""21"")`</li><li>`String.valueOf(""21"")`</li></ul>","`Integer.parseInt(""21"")`"
"<b> What method should be added to the Duck class to print the name Moby?</b><br><br>```java<br>public class Duck {<br>private String name;<br>Duck(String name) {<br>this.name = name;<br>}<br>public static void main(String[] args) {<br>System.out.println(new Duck(""Moby""));<br>}<br>}<br>```<br><br><ul><li>`public String toString() { return name; } `</li><li>`public void println() { System.out.println(name); } `</li><li>`String toString() { return this.name; } `</li><li>`public void toString() { System.out.println(this.name); } `</li></ul>",`public String toString() { return name; } `
<b> Which operator is used to concatenate Strings in Java</b><br><ul><li>`+`</li><li>`&`</li><li>`.`</li><li>`-`</li></ul>,`+`<br><br>[Reference](https://www.techiedelight.com/concatenate-two-strings-java/)<br>
"<b> How many times does this loop print ""exterminate""?</b><br><br>```java<br>for (int i = 44; i > 40; i--) {<br>System.out.println(""exterminate"");<br>}<br>```<br><br><ul><li>two</li><li>four</li><li>three</li><li>five</li></ul>",four
"<b> What is the value of myCharacter after line </b><br><br>```java<br>1: public class Main {<br>2:   public static void main (String[] args) {<br>3:     char myCharacter = ""piper"".charAt(3);<br>4:   }<br>5: }<br>```<br><br><ul><li>p</li><li>r</li><li>e</li><li>i</li></ul>",e
<b> When should you use a static method?</b><br><ul><li>when your method is related to the object's characteristics</li><li>when you want your method to be available independently of class instances</li><li>when your method uses an object's instance variable</li><li>when your method is dependent on the specific instance that calls it</li></ul>,when you want your method to be available independently of class instances
<b> What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?</b><br><ul><li>pass by reference</li><li>pass by occurrence</li><li>pass by value</li><li>API call</li></ul>,pass by value
"<b> In Java, what is the scope of a method's argument or parameter?</b><br><ul><li>inside the method</li><li>both inside and outside the method</li><li>neither inside nor outside the method</li><li>outside the method</li></ul>",inside the method
"<b> What is the output of this code?</b><br><br>```java<br>public class Main {<br>public static void main (String[] args) {<br>int[] sampleNumbers = {8, 5, 3, 1};<br>System.out.println(sampleNumbers[2]);<br>}<br>}<br>```<br><br><ul><li>5</li><li>8</li><li>1</li><li>3</li></ul>",3
"<b> Which change will make this code compile successfully?</b><br><br>```java<br>1: public class Main {<br>2:   String MESSAGE =""Hello!"";<br>3:   static void print(){<br>4:     System.out.println(message);<br>5:   }<br>6:   void print2(){}<br>7: }<br>```<br><br><ul><li>Change line 2 to `public static final String message`</li><li>Change line 6 to `public void print2(){}`</li><li>Remove the body of the `print2` method and add a semicolon.</li><li>Remove the body of the `print` method.</li></ul>",Remove the body of the `print` method.<br><br>**Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`<br>
"<b> What is the output of this code?</b><br><br>```java<br>import java.util.*;<br>class Main {<br>public static void main(String[] args) {<br>String[] array = new String[]{""A"", ""B"", ""C""};<br>List<String> list1 = Arrays.asList(array);<br>List<String> list2 = new ArrayList<>(Arrays.asList(array));<br>List<String> list3 = new ArrayList<>(Arrays.asList(""A"", new String(""B""), ""C""));<br>System.out.print(list1.equals(list2));<br>System.out.print(list1.equals(list3));<br>}<br>}<br>```<br><br><ul><li>falsefalse</li><li>truetrue</li><li>falsetrue</li><li>truefalse</li></ul>",truetrue
"<b> Which code snippet is valid?</b><br><ul><li>`ArrayList<String> words = new ArrayList<String>(){""Hello"", ""World""};`</li><li>`ArrayList words = Arrays.asList(""Hello"", ""World"");`</li><li>`ArrayList<String> words = {""Hello"", ""World""};`</li><li>`ArrayList<String> words = new ArrayList<>(Arrays.asList(""Hello"", ""World""));`</li></ul>","`ArrayList<String> words = new ArrayList<>(Arrays.asList(""Hello"", ""World""));`"
"<b> What is the output of this code?</b><br><br>```java<br>class Main {<br>public static void main(String[] args) {<br>StringBuilder sb = new StringBuilder(""hello"");<br>sb.deleteCharAt(0).insert(0, ""H"")."" World!"";<br>System.out.println(sb);<br>}<br>}<br>```<br><br><ul><li>A runtime exception is thrown.</li><li>""HelloWorld!""</li><li>""hello""</li><li>????</li></ul>",A runtime exception is thrown.
<b> How would you use the TaxCalculator to determine the amount of tax on $</b><br><br>```java<br>class TaxCalculator {<br>static calculate(total) {<br>return total * .05;<br>}<br>}<br>```<br><br><ul><li>TaxCalculator.calculate(50);</li><li>new TaxCalculator.calculate(50);</li><li>calculate(50);</li><li>new TaxCalculator.calculate($50);</li></ul>,"TaxCalculator.calculate(50);<br><br>**Note:** This code won't compile, broken code sample<br>[Reference](https://www.geeksforgeeks.org/static-methods-vs-instance-methods-java/)<br>[Code sample](https://replit.com/@mattheweller/EverlastingShadyBraces#TaxCalculator.java)<br>"
<b> Which characteristic does not apply to instances of java.util.HashSet=</b><br><ul><li>uses hashcode of objects when inserted</li><li>contains unordred elements</li><li>contains unique elements</li><li>contains sorted elements</li></ul>,"contains sorted elements<br><br>**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.<br>[Reference](https://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html)<br>"
"<b> What is the output?</b><br><br>```java<br>import java.util.*;<br>public class Main {<br>public static void main(String[] args)<br>{<br>PriorityQueue<Integer> queue = new PriorityQueue<>();<br>queue.add(4);<br>queue.add(3);<br>queue.add(2);<br>queue.add(1);<br>while (queue.isEmpty() == false) {<br>System.out.printf(""%d"", queue.remove());<br>}<br>}<br>}<br>```<br><br><ul><li>1 3 2 4</li><li>4 2 3 1</li><li>1 2 3 4</li><li>4 3 2 1</li></ul>",1 2 3 4
"<b> What will this code print, assuming it is inside the main method of a class?</b><br><br>`System.out.println(""hello my friends"".split("" "")[0]);`<br><br><ul><li>my</li><li>hellomyfriends</li><li>hello</li><li>friends</li></ul>",hello
"<b> You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=</b><br><ul><li>2</li><li>When calling the put method, Java will throw an exception</li><li>4</li><li>3</li></ul>",3
<b> Which class acts as root class for Java Exception hierarchy?</b><br><ul><li>Clonable</li><li>Throwable</li><li>Object</li><li>Serializable</li></ul>,Throwable
<b> Which class does not implement the java.util.Collection interface?</b><br><ul><li>java.util.Vector</li><li>java.util.ArrayList</li><li>java.util.HashSet</li><li>java.util.HashMap</li></ul>,java.util.HashMap<br><br>**Explanation**: HashMap class implements Map interface.<br>
<b> You have a variable of named `employees` of type `List<Employee>` containing multiple entries. The `Employee` type has a method `getName()` that returns te employee name. Which statement properly extracts a list of employee names?</b><br><ul><li>`employees.collect(employee -> employee.getName());`</li><li>`employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());`</li><li>`employees.stream().map(Employee::getName).collect(Collectors.toList());`</li><li>`employees.stream().collect((e) -> e.getName());`</li></ul>,`employees.stream().map(Employee::getName).collect(Collectors.toList());`
"<b> This code does not compile. What needs to be changed so that it does?</b><br><br>```<br>public enum Direction {<br>EAST(""E""),<br>WEST(""W""),<br>NORTH(""N""),<br>SOUTH(""S"");<br>private final String shortCode;<br>public String getShortCode() {<br>return shortCode;<br>}<br>}<br>```<br><br><ul><li>Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.</li><li>Remove the `final` keyword for the field `shortCode`.</li><li>All enums need to be defined on a single line of code.</li><li>Add a setter method for the field `shortCode`.</li></ul>",Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.
<b> Which language feature ensures that objects implementing the `AutoCloseable` interface are closed when it completes?</b><br><ul><li>try-catch-finally</li><li>try-finally-close</li><li>try-with-resources</li><li>try-catch-close</li></ul>,try-with-resources
"<b> What code should go in line </b><br><br>```java<br>class Main {<br>public static void main(String[] args) {<br>array[0] = new int[]{1, 2, 3};<br>array[1] = new int[]{4, 5, 6};<br>array[2] = new int[]{7, 8, 9};<br>for (int i = 0; i < 3; i++)<br>System.out.print(array[i][1]); //prints 258<br>}<br>}<br>```<br><br><ul><li>`int[][] array = new int[][];`</li><li>`int[][] array = new int[3][3];`</li><li>`int[][] array = new int[2][2];`</li><li>`int[][] array = [][];`</li></ul>",`int[][] array = new int[3][3];`
<b> Is this an example of method overloading or overriding?</b><br><br>```java<br>class Car {<br>public void accelerate() {}<br>}<br>class Lambo extends Car {<br>public void accelerate(int speedLimit) {}<br>public void accelerate() {}<br>}<br>```<br><br><ul><li>neither</li><li>both</li><li>overloading</li><li>overriding</li></ul>,both
<b> Which choice is the best data type for working with money in Java?</b><br><ul><li>float</li><li>String</li><li>double</li><li>BigDecimal</li></ul>,BigDecimal
<b> Which statement about constructors is not ture?</b><br><ul><li>A class can have multiple constructors with a different parameter list.</li><li>You can call another constructor with `this` or `super`.</li><li>A constructor does not define a return value.</li><li>Every class must explicitly define a constructor without parameters.</li></ul>,Every class must explicitly define a constructor without parameters.
"<b> What language feature allows types to be parameters on classes, interfaces, and methods in order to reuse the same code for different data types?</b><br><ul><li>Regular Expressions</li><li>Reflection</li><li>Generics</li><li>Concurrency</li></ul>",Generics
"<b> What will be printed?</b><br><br>```java<br>public class Berries{<br>String berry = ""blue"";<br>public static void main( String[] args ) {<br>new Berries().juicy( ""straw"" );<br>}<br>void juicy(String berry){<br>this.berry = ""rasp"";<br>System.out.println(berry + ""berry"");<br>}<br>}<br>```<br><br><ul><li>raspberry</li><li>strawberry</li><li>blueberry</li><li>rasp</li></ul>",strawberry
"<b> What is the value of `forestCount` after this code executes?</b><br><br>```java<br>Map<String, Integer> forestSpecies = new HashMap<>();<br>forestSpecies.put(""Amazon"", 30000);<br>forestSpecies.put(""Congo"", 10000);<br>forestSpecies.put(""Daintree"", 15000);<br>forestSpecies.put(""Amazon"", 40000);<br>int forestCount = forestSpecies.size();<br>```<br><br><ul><li>3</li><li>4</li><li>2</li><li>When calling the put method, Java will throw an exception</li></ul>",3
"<b> What is a problem with this code?</b><br><br>```java<br>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.List;<br>class Main {<br>public static void main( String[] args ) {<br>List<String> list = new ArrayList<String>( Arrays.asList( ""a"", ""b"", ""c"" ) );<br>for( String value :list ){<br>if( value.equals( ""a"" ) ) {<br>list.remove( value );<br>}<br>}<br>System.out.println(list); // outputs [b,c]<br>}<br>}<br>```<br><br><ul><li>String should be compared using == method instead of equals.</li><li>Modifying a collection while iterating through it can throw a ConcurrentModificationException.</li><li>The List interface does not allow an argument of type String to be passed to the remove method.</li><li>ArrayList does not implement the List interface.</li></ul>",Modifying a collection while iterating through it can throw a ConcurrentModificationException.
"<b> How do you convert this method into a lambda expression?</b><br><br>```java<br>public int square(int x){<br>return x * x;<br>}<br>```<br><br><ul><li>`Function<Integer, Integer> squareLambda = (int x) -> { x * x };`</li><li>`Function<Integer, Integer> squareLambda = () -> { return x * x };`</li><li>`Function<Integer, Integer> squareLambda = x -> x * x;`</li><li>`Function<Integer, Integer> squareLambda = x -> return x * x;`</li></ul>","`Function<Integer, Integer> squareLambda = x -> x * x;`"
<b> Which choice is a valid implementation of this interface?</b><br><br>```java<br>interface MyInterface {<br>int foo(int x);<br>}<br>```<br><br><ul><li>A```java<br>public class MyClass implements MyInterface {<br>// ....<br>public void foo(int x){<br>System.out.println(x);<br>}<br>}<br>```<br></li><li>B```java<br>public class MyClass implements MyInterface {<br>// ....<br>public double foo(int x){<br>return x * 100;<br>}<br>}<br>```<br></li><li>C```java<br>public class MyClass implements MyInterface {<br>// ....<br>public int foo(int x){<br>return x * 100;<br>}<br>}<br>```<br></li><li>D```java<br>public class MyClass implements MyInterface {<br>// ....<br>public int foo(){<br>return 100;<br>}<br>}<br>```<br></li></ul>,C```java<br>public class MyClass implements MyInterface {<br>// ....<br>public int foo(int x){<br>return x * 100;<br>}<br>}<br>```<br>
<b> What is the result of this program?</b><br><br>```java<br>interface Foo{<br>int x = 10;<br>}<br>public class Main{<br>public static void main( String[] args ) {<br>Foo.x = 20;<br>System.out.println(Foo.x);<br>}<br>}<br>```<br><br><ul><li>10</li><li>20</li><li>null</li><li>An error will occur when compiling.</li></ul>,An error will occur when compiling.
"<b> Which statement must be inserted on line </b><br><br>```<br>1:<br>2: Optional<String> opt = Optional.of(val);<br>3: System.out.println(opt.isPresent());<br>```<br><br><ul><li>`Integer val = 15;`</li><li>`String val = ""Sam"";`</li><li>`String val = null;`</li><li>`Optional<String> val = Optional.empty();`</li></ul>","`String val = ""Sam"";`"
"<b> What will this code print, assuming it is inside the main method of a class?</b><br><br>```java<br>System.out.println(true && false || true);<br>System.out.println(false || false && true);<br>```<br><br><ul><li>false </br> true</li><li>true </br> true</li><li>true </br> false</li><li>false </br> false</li></ul>",true </br> false
"<b> What will this code print?</b><br><br>```java<br>List<String> list1 = new ArrayList<>();<br>list1.add( ""One"" );<br>list1.add( ""Two"" );<br>list1.add( ""Three"" );<br>List<String> list2 = new ArrayList<>();<br>list2.add( ""Two"" );<br>list1.remove( list2 );<br>System.out.println(list1);<br>```<br><br><ul><li>`[Two]`</li><li>`[One, Two, Three]`</li><li>`[One, Three]`</li><li>`Two`</li></ul>","`[One, Two, Three]`"
"<b> Which code checks whether the characters in two Strings,named `time` and `money`, are the same?</b><br><ul><li>`if(time <> money){}`</li><li>`if(time.equals(money)){}`</li><li>`if(time == money){}`</li><li>`if(time = money){}`</li></ul>",`if(time.equals(money)){}`
"<b> An **\_** is a serious issue thrown by the JVM that the JVM is unlikely to recover from. An **\_** is an unexpected event that an application may be able to deal with in order to continue execution.</b><br><ul><li>exception,assertion</li><li>AbnormalException, AccidentalException</li><li>error, exception</li><li>exception, error</li></ul>","error, exception"
<b> Which keyword would not be allowed here?</b><br><br>```java<br>class Unicorn {<br>_____ Unicorn(){}<br>}<br>```<br><br><ul><li>static</li><li>protected</li><li>public</li><li>void</li></ul>,static
"<b> Which OOP concept is this code an example of?</b><br><br>```java<br>List[] myLists = {<br>new ArrayList<>(),<br>new LinkedList<>(),<br>new Stack<>(),<br>new Vector<>(),<br>};<br>for (List list : myLists){<br>list.clear();<br>}<br>```<br><br><ul><li>composition</li><li>generics</li><li>polymorphism</li><li>encapsulation</li></ul>",polymorphism<br><br>**Explanation:** switch between different implementations of the `List` interface<br>
"<b> What does this code print?</b><br><br>```java<br>String a = ""bikini"";<br>String b = new String(""bikini"");<br>String c = new String(""bikini"");<br>System.out.println(a == b);<br>System.out.println(b == c);<br>```<br><br><ul><li>true; false</li><li>false; false</li><li>false; true</li><li>true; true</li></ul>","false; false<br><br>**Explanation:** `== operator` compares the object reference. `String a = ""bikini""; String b = ""bikini"";` would result in True. Here new creates a new object, so false. Use `equals() method` to compare the content.<br>"
<b> What keyword is added to a method declaration to ensure that two threads do not simultaneously execute it on the same object instance?</b><br><ul><li>native</li><li>volatile</li><li>synchronized</li><li>lock</li></ul>,synchronized<br><br>[Java Documentation: Synchronized methods](https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html)<br>
"<b> Which is a valid type for this lambda function?</b><br><br>```java<br>_____ oddOrEven = x -> {<br>return x % 2 == 0 ? ""even"" : ""odd"";<br>};<br>```<br><br><ul><li>`Function<Integer, Boolean>`</li><li>`Function<String>`</li><li>`Function<Integer, String>`</li><li>`Function<Integer>`</li></ul>","`Function<Integer, String>`<br><br>[Explaination](https://github.com/0nyr/java/tree/main/examples/lambda_function), [Reference](https://www.geeksforgeeks.org/function-interface-in-java-with-examples/)<br>"
"<b> What is displayed when this code is compiled and executed?</b><br><br>```java<br>import java.util.HashMap;<br>public class Main {<br>public static void main(String[] args) {<br>HashMap<String, Integer> pantry = new HashMap<>();<br>pantry.put(""Apples"", 3);<br>pantry.put(""Oranges"", 2);<br>int currentApples = pantry.get(""Apples"");<br>pantry.put(""Apples"", currentApples + 4);<br>System.out.println(pantry.get(""Apples""));<br>}<br>}<br>```<br><br><ul><li>6</li><li>3</li><li>4</li><li>7</li></ul>",7<br><br>[Explanation](https://github.com/0nyr/java/tree/main/training/linkedin_assessment/what_is_displayed_0)<br>
"<b> What variable type should be declared for capitalize?</b><br><br>```shell<br>List<String> songTitles = Arrays.asList(""humble"", ""element"", ""dna"");<br>_______ capitalize = (str) -> str.toUpperCase();<br>songTitles.stream().map(capitalize).forEach(System.out::println);<br>```<br><br><ul><li>`Function<String, String>`</li><li>`Stream<String>`</li><li>`String<String, String>`</li><li>`Map<String, String>`</li></ul>","`Function<String, String>`<br><br>[Explanation](https://github.com/0nyr/java/tree/main/training/linkedin_assessment/what_variable_type_0), [Reference](https://www.geeksforgeeks.org/function-interface-in-java-with-examples/)<br>"
"<b> Which is the correct return type for the processFunction method?</b><br><br>```java<br>_____ processFunction(Integer number, Function<Integer, String> lambda) {<br>return lambda.apply(number);<br>}<br>```<br><br><ul><li>`Integer`</li><li>`String`</li><li>`Consumer`</li><li>`Function<Integer, String>`</li></ul>",`String`<br><br>[Explanation](https://github.com/0nyr/java/tree/main/training/linkedin_assessment/which_return_type_0)<br>
"<b> What function could you use to replace slashes for dashes in a list of dates?</b><br><br>```java<br>List<String> dates = new ArrayList<String>();<br>// missing code<br>dates.replaceAll(replaceSlashes);<br>```<br><br><ul><li>`UnaryOperator<String> replaceSlashes = date -> date.replace(""/"", ""-"");`</li><li>`Function<String, String> replaceSlashes = dates -> dates.replace(""-"", ""/"");`</li><li>`Map<String, String> replaceSlashes = dates.replace(""/"", ""-"");`</li><li>`Consumer<Date> replaceSlashes = date -> date.replace(""/"", ""-"");`</li></ul>","`UnaryOperator<String> replaceSlashes = date -> date.replace(""/"", ""-"");`<br><br>**Explanation:** `replaceAll` method for any List<T> only accepts UnaryOperator<T> to pass every single element into it then put the result into the List<T> again.<br>"
<b> From which class do all other classes implicitly extend?</b><br><ul><li>`Object`</li><li>`Main`</li><li>`Java`</li><li>`Class`</li></ul>,`Object`<br><br>[Explanation](https://stackoverflow.com/questions/17187218/default-class-that-is-extended-by-all-classes-in-java)<br>
"<b> How do you create and run a Thread for this class?</b><br><br>```java<br>import java.util.date;<br>public class CurrentDateRunnable implements Runnable {<br>@Override<br>public void run () {<br>while (true) {<br>System.out.println(""Current date: "" + new Date());<br>try {<br>Thread.sleep(5000);<br>} catch (InterruptedException e) {<br>throw new RuntimeException(e);<br>}<br>}<br>}<br>}<br>```<br><br><ul><li>`Thread thread = new Thread(new CurrentDateRunnable()); thread.start();`</li><li>`new Thread(new CurrentDateRunnable()).join();`</li><li>`new CurrentDateRunnable().run();`</li><li>`new CurrentDateRunnable().start();`</li></ul>",`Thread thread = new Thread(new CurrentDateRunnable()); thread.start();`<br><br>[Reference](https://www.w3schools.com/java/java_threads.asp)<br>
"<b> Which expression is a functional equivalent?</b><br><br>```java<br>List<Integer> numbers = List.of(1,2,3,4);<br>int total = 0;<br>for (Integer x : numbers) {<br>if (x % 2 == 0)<br>total += x * x;<br>}<br>```<br><br><ul><li>A```java<br>int total = numbers.stream()<br>.transform(x -> x * x)<br>.filter(x -> x % 2 == 0)<br>.sum ();<br>```<br></li><li>B```java<br>int total = numbers.stream()<br>.filter(x -> x % 2 == 0)<br>.collect(Collectors.toInt());<br>```<br></li><li>C```java<br>int total = numbers.stream()<br>.mapToInt (x -> {if (x % 2 == 0) return x * x;})<br>.sum();<br>```<br></li><li>D```java<br>int total = numbers.stream()<br>.filter(x -> x % 2 == 0)<br>.mapToInt(x -> x * x)<br>.sum();<br>```<br></li></ul>","D```java<br>int total = numbers.stream()<br>.filter(x -> x % 2 == 0)<br>.mapToInt(x -> x * x)<br>.sum();<br>```<br><br><br>**Explanation:** The given code in the question will give you the output 20 as total<br>```<br>numbers                         // Input `List<Integer>` > [1, 2, 3, 4] <br><br>.stream()                   // Converts input into `Stream<Integer>` <br><br>.filter(x -> x % 2 == 0)    // Filter even numbers and return `Stream<Integer>` > [2, 4] <br><br>.mapToInt(x -> x * x)       // Square the number, converts `Integer` to an `int`, and returns `IntStream` > [4, 16] <br><br>.sum()                      // Returns the sum as `int` > 20<br>```<br>"
<b> Which is not one of the standard input/output streams provided by java.lang.System?</b><br><ul><li>print</li><li>out</li><li>err</li><li>in</li></ul>,print
"<b> The compiler is complaining about this assignment of the variable pickle to the variable jar. How woulld you fix this?</b><br><br>```java<br>double pickle = 2;<br>int jar = pickle;<br>```<br><br><ul><li>Use the method toInt() to convert pickle before assigning it to jar.</li><li>Cast pickle to an int before assigning it to jar.</li><li>Make pickle into a double by adding + "".0""</li><li>Use the new keyword to create a new Integer from pickle before assigning it to jar.</li></ul>",Cast pickle to an int before assigning it to jar.
<b> What value should x have to make this loop execute </b><br><br>```java<br>for(int i=0; i<30; i+=x) {}<br>```<br><br><ul><li>10</li><li>3</li><li>1</li><li>0</li></ul>,3
"<b> The **\_** runs copmpiled Java code, while the **\_** compiles Java files.</b><br><ul><li>IDE; JRE</li><li>JDK; IDE</li><li>JRE; JDK</li><li>JDK; JRE</li></ul>",JRE; JDK<br><br>[Reference](https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre)<br>
