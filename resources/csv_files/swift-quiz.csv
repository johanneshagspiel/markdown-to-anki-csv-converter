<b> What is this code an example of?</b><br><br>```swift<br>let val = (Double)6<br>```<br><br><ul><li>A syntax issue</li><li>Typecasting</li><li>Assignment</li><li>InitializationReference: [_The Swift Programming Language: Language Guide: The Basics: Constants and Variables_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID310)<br></li></ul>,A syntax issue
<b> What is the error in this code?</b><br><br>```swift<br>let x = 5<br>guard x == 5 { return }<br>```<br><br><ul><li>The `guard` is missing the `else`</li><li>Nothing is wrong</li><li>The `guard` is missing a `then`</li><li>The comparison is wrongReference: [_The Swift Programming Language: Language Guide: Control Flow: Early Exit_](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID525)<br></li></ul>,The `guard` is missing the `else`
"<b> What is the raw/underlying type of this enum?</b><br><br>```swift<br>enum Direction {<br>case north, south, east, west<br>}<br>```<br><br><ul><li>There is none</li><li>`String`</li><li>`Any`</li><li>`Int`Reference: [_The Swift Programming Language: Language Guide: Enumerations: Raw Values_](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID149)<br></li></ul>",There is none
<b> Why is dispatchGroup used in certain situations?</b><br><ul><li>It allows multiple synchronous or asynchronous operations to run on different queues.</li><li>It allows track and control execution of multiple operations together.</li><li>It allows operations to wait for each other as desired.</li><li>All of these answers.Reference: [Apple Developer: Documentation: Dispatch: Dispatch Group](https://developer.apple.com/documentation/dispatch/dispatchgroup)<br></li></ul>,All of these answers.Reference: [Apple Developer: Documentation: Dispatch: Dispatch Group](https://developer.apple.com/documentation/dispatch/dispatchgroup)<br>
"<b> What is this code an example of?</b><br><br>```swift<br>let val = 5<br>print(""value is: \(val)"")<br>```<br><br><ul><li>String interpolation</li><li>String compilation</li><li>Method chaining</li><li>String concatenationReference: [_The Swift Programming Language: Language Guide: Strings and Characters: String Interpolation_](https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID292)<br></li></ul>",String interpolation
"<b> What are the contents of `vals` after this code is executed?</b><br><br>```swift<br>var vals = [10, 2]<br>vals.sort { (s1, s2) -> Bool in<br>s1 > s2<br>}<br>```<br><br><ul><li>`[10, 2]`</li><li>`[2, 10]`</li><li>`nil`</li><li>This code contains an errorReference: [Apple Developer: Documentations: Swift: Array: sort()](<https://developer.apple.com/documentation/swift/array/sort()>)<br></li></ul>","`[10, 2]`"
"<b> What does this code print?</b><br><br>```swift<br>typealias Thing = [String: Any]<br>var stuff: Thing<br>print(type(of: stuff))<br>```<br><br><ul><li>`Dictionary<String, Any>`</li><li>`Dictionary`</li><li>`Error`</li><li>`Thing`Reference: [_The Swift Programming Language: Language Reference: Types: Type Identifier_](https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID447)<br></li></ul>","`Dictionary<String, Any>`"
"<b> What is the value of y?</b><br><br>```swift<br>let x = [""1"", ""2""].dropFirst()<br>let y = x[0]<br>```<br><br><ul><li>This code contains an error</li><li>`1`</li><li>`2`</li><li>`nil`Reference: [Apple Developer: Documentation: Swift: Array: dropFirst(\_:)](<https://developer.apple.com/documentation/swift/array/dropfirst(_:)>)<br></li></ul>",This code contains an error
<b> What is the value of test in this code?</b><br><br>```swift<br>var test = 1 == 1<br>```<br><br><ul><li>`true`</li><li>`YES`</li><li>`1`</li><li>This code contains an errorReference: [_The Swift Programming Language: Language Guide: Basic Operators: Comparison Operators_](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID70)<br></li></ul>,`true`
<b> What is the value of y?</b><br><br>```swift<br>var x: Int?<br>let y = x ?? 5<br>```<br><br><ul><li>`5`</li><li>`0`</li><li>`nil`</li><li>This code contains an errorReference: [_The Swift Programming Language: Language Guide: Basic Operators: Nil-Coalescing Operators_](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72)<br></li></ul>,`5`
"<b> What is the type of this function?</b><br><br>```swift<br>func add(a: Int, b: Int) -> Int { return a+b }<br>```<br><br><ul><li>`Int`</li><li>`(Int, Int) -> Int`</li><li>`Int<Optional>`</li><li>Functions don't have types.Reference: [_The Swift Programming Language: Language Guide: Functions: Function Types_](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID174)<br></li></ul>","`(Int, Int) -> Int`"
"<b> What is the correct way to call this function?</b><br><br>```swift<br>func myFunc(_ a: Int, b: Int) -> Int {<br>return a + b<br>}<br>```<br><br><ul><li>`myFunc(5, b: 6)`</li><li>`myFunc(5, 6)`</li><li>`myFunc(a: 5, b: 6)`</li><li>`myFunc(a, b)`Reference: [_The Swift Programming Language: Language Guide: Functions: Function Argument Labels and Parameter Names_](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166)<br></li></ul>","`myFunc(5, b: 6)`"
"<b> The Codable protocol is **\_**?</b><br><ul><li>A combination of `Encodable` and `Decodable`</li><li>Not a true protocol</li><li>Required of all classes</li><li>Automatically included in all classesReferences:<br>- [Apple Developer: Documentation: Swift: Swift Standard Library: Encoding, Decoding, and Serialization: Codable](https://developer.apple.com/documentation/swift/codable/)<br>- [_The Swift Programming Language: Language Guide: Protocols: Protocol Composition_](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID282)<br></li></ul>",A combination of `Encodable` and `Decodable`
"<b> What is the type of value</b><br><br>```swift<br>let value1 = ""\(""test"".count)""<br>```<br><br><ul><li>`String`</li><li>`Int`</li><li>`null`</li><li>`test.count`Reference: [_The Swift Programming Language: Language Guide: Strings and Characters: String Interpolation_](https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID292)<br></li></ul>",`String`
"<b> When a function takes a closure as a parameter, when do you want to mark is as escaping?</b><br><ul><li>When it's executed after the function returns</li><li>When it's scope is undefined</li><li>When it's lazy loaded</li><li>All of these answersReference: [_The Swift Programming Language: Language Guide: Closures: Escaping Closures_](https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID546)<br></li></ul>",When it's executed after the function returns
<b> What's wrong with this code?</b><br><br>```swift<br>class Person {<br>var name: String<br>var address: String<br>}<br>```<br><br><ul><li>Person has no initializers.</li><li>Person has no base class.</li><li>`var name` is not formatted correctly.</li><li>`address` is a keyword.Reference: [_The Swift Programming Language: Language Guide: Initialization: Class Inheritance and Initialization_](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID216)<br></li></ul>,Person has no initializers.
"<b> What is the value of names after this code is executed?</b><br><br>```swift<br>let names = [""Bear"", ""Joe"", ""Clark""]<br>names.map { (s) -> String in<br>return s.uppercased()<br>}<br>```<br><br><ul><li>`[""BEAR"", ""JOE"", ""CLARK""]`</li><li>`[""B"", ""J"", ""C""]`</li><li>`[""Bear"", ""Joe"", ""Clark""]`</li><li>This code contains an error.</li></ul>","`[""Bear"", ""Joe"", ""Clark""]`"
<b> What describes this line of code?</b><br><br>```swift<br>let val = 5<br>```<br><br><ul><li>A constant named val of type `Int`</li><li>A variable named val of type `item`</li><li>A constant named val of type `Number`</li><li>A variable named val of type `Int`Reference: [_The Swift Programming Language: Language Guide: The Basics: Type Safety and Type Inference_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322)<br></li></ul>,A constant named val of type `Int`
"<b> What is the error in this code?</b><br><br>```swift<br>extension String {<br>var firstLetter: Character = ""c"" {<br>didSet {<br>print(""new value"")<br>}<br>}<br>}<br>```<br><br><ul><li>Extensions can't add properties.</li><li>Nothing is wrong with it.</li><li>`didSet` takes a parameter.</li><li>`c` is not a character.Reference: [_The Swift Programming Language: Language Guide: Extensions: Computed Properties_](https://docs.swift.org/swift-book/LanguageGuide/Extensions.html#ID152)<br></li></ul>",Extensions can't add properties.
<b> didSet and willSet are examples of **\_**?</b><br><ul><li>Property observers</li><li>Key properties</li><li>All of these answers</li><li>`newOld` value callsReference: [_The Swift Programming Language: Language Guide: Properties_](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262)<br></li></ul>,Property observers
<b> What is wrong with this code?</b><br><br>```swift<br>self.callback = {<br>self.attempts += 1<br>self.downloadFailed()<br>}<br>```<br><br><ul><li>Use of `self` inside the closure causes retain cycle.</li><li>You cannot assign a value to a closure in this manner.</li><li>You need to define the type of closure explicitly.</li><li>There is nothing wrong with this code.Reference: [_The Swift Programming Language: Language Guide: Automatic Reference Counting: Strong Reference Cycles for Closures_](https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56)<br></li></ul>,Use of `self` inside the closure causes retain cycle.
"<b> How many values does vals have after this code is executed?</b><br><br>```swift<br>var vals = Set<String> = [""4"", ""5"", ""6""]<br>vals.insert(""5"")<br>```<br><br><ul><li>Three</li><li>Four</li><li>Eight</li><li>This code contains an error.Reference: [_The Swift Programming Language: Language Guide: Collection Types: Sets_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID484)<br></li></ul>",This code contains an error.Reference: [_The Swift Programming Language: Language Guide: Collection Types: Sets_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID484)<br>
"<b> How can you avoid a strong reference cycle in a closure?</b><br><ul><li>Use a capture list to set class instances of `weak` or `unowned`.</li><li>You can't, there will always be a danger of strong reference cycles inside a closure.</li><li>Initialize the closure as read-only.</li><li>Declare the closure variable as `lazy`.Reference: [_The Swift Programming Language: Language Guide: Automatic Reference Counting_](https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56)<br></li></ul>",Use a capture list to set class instances of `weak` or `unowned`.
"<b> What is wrong with this code?</b><br><br>```swift<br>if let s = String.init(""some string"") {<br>print(s)<br>}<br>```<br><br><ul><li>This `String` initializer does not return an optional.</li><li>String does not have an initializer that can take a `String`.</li><li>`=` is not a comparison.</li><li>Nothing is wrong with this code.Reference: [_The Swift Programming Language: Language Guide: The Basics: Optionals_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330)<br></li></ul>",This `String` initializer does not return an optional.
<b> Which code snippet correctly creates a typealias closure?</b><br><ul><li>`typealias CustomClosure = () -> ()`</li><li>`typealias CustomClosure { () -> () }`</li><li>`typealias CustomClosure -> () -> ()`</li><li>`typealias CustomClosure -> () {}`Reference: [_The Swift Programming Language: Language Reference: Declarations: Type Alias Declaration_](https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_typealias-declaration)<br></li></ul>,`typealias CustomClosure = () -> ()`
<b> How do you reference class members from within a class?</b><br><ul><li>`self`</li><li>`instance`</li><li>`class`</li><li>`this`Reference: [_The Swift Programming Language: Language Guide: Methods: Instance Methods_](https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID235)<br></li></ul>,`self`
<b> All value types in Swift are **\_** under the hood?</b><br><ul><li>Structs</li><li>Classes</li><li>Optionals</li><li>GenericsReference: [_The Swift Programming Language: Language Guide: Structures and Classes_](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88)<br></li></ul>,Structs
"<b> What is the correct way to add a value to this array?</b><br><br>```swift<br>var strings = [1, 2, 3]<br>```<br><br><ul><li>All of these answers</li><li>`strings.append(4)`</li><li>`strings.insert(5, at: 1)`</li><li>`strings += [5]`Reference: [_The Swift Programming Language: Language Guide: Collection Types: Arrays_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107)<br></li></ul>",All of these answers
<b> How many times will this loop be executed?</b><br><br>```swift<br>for i in 0...100 {<br>print(i)<br>}<br>```<br><br><ul><li>0</li><li>101</li><li>99</li><li>100References:<br>- [_The Swift Programming Language: Language Guide: Control Flow: For-in Loops_](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121)<br>- [_The Swift Programming Language: Language Guide: Basic Operators: Range Operators_](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID73)<br></li></ul>,101
<b> What can AnyObject represent?</b><br><ul><li>An instance of any class</li><li>An instance of function type</li><li>All of these answers</li><li>An instance of an optional typeReference: [_The Swift Programming Language: Language Guide: Type Casting: Type Casting for Any and AnyObject_](https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342)<br></li></ul>,An instance of any class
"<b> What is the value of t after this code is executed?</b><br><br>```swift<br>let names = [""Larry"", ""Sven"", ""Bear""]<br>let t = names.enumerated().first().offset<br>```<br><br><ul><li>This code does not compile. / This code is invalid.</li><li>0</li><li>1</li><li>LarryReferences:<br>- [Apple Developer: Documentation: Swift: Array: enumerated()](<https://developer.apple.com/documentation/swift/array/enumerated()>)<br>- [Apple Developer: Documentation: Swift: Array](https://developer.apple.com/documentation/swift/array/first)<br></li></ul>",This code does not compile. / This code is invalid.
"<b> What is the value of test after this code executes?</b><br><br>```swift<br>let vt = (name: ""ABC"", val: 5)<br>let test = vt.0<br>```<br><br><ul><li>`ABC`</li><li>`0`</li><li>`5`</li><li>`name`References:<br>- [_The Swift Programming Language: Language Guide: The Basics: Tuples_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID329)<br>- [_The Swift Programming Language: Language Reference: Expressions: Primary Expressions: Tuple Expression_](https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_tuple-expression)<br></li></ul>",`ABC`
<b> What is the base class in this code?</b><br><br>```swift<br>class LSN: MMM {<br>}<br>```<br><br><ul><li>MMM</li><li>LSN</li><li>There is no base class.</li><li>This code is invalid.Reference: [_The Swift Programming Language: Language Guide: Inheritance: Subclassing_](https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID195)<br></li></ul>,MMM
"<b> What does this code print to the console?</b><br><br>```swift<br>var userLocation: String = ""Home"" {<br>willSet(newValue) {<br>print(""About to set userLocation to \(newValue)..."")<br>}<br>didSet {<br>if userLocation != oldValue {<br>print(""userLocation updated with new value!"")<br>} else {<br>print(""userLocation already set to that value..."")<br>}<br>}<br>}<br>userLocation = ""Work""<br>```<br><br><ul><li>`About to set userLocation to Work... userLocation updated with new value!`</li><li>`About to set userLocation to Work... userLocation already set to that value...`</li><li>`About to set userLocation to Home... userLocation updated to new value!`</li><li>`Error`Reference: [_The Swift Programming Language: Language Guide: Properties: Property Observers_](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262)<br></li></ul>",`About to set userLocation to Work... userLocation updated with new value!`
<b> What must a convenience initializer call?</b><br><ul><li>A base class convenience initializer</li><li>Either a designated or another convenience initializer</li><li>A designated initializer</li><li>None of these answersReference: [_The Swift Programming Language: Language Guide: Initialization: Class Inheritance and Initialization_](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID216)<br></li></ul>,A designated initializer
<b> Which object allows you access to specify that a block of code runs in a background thread?</b><br><ul><li>DispatchQueue.visible</li><li>DispatchQueue.global</li><li>errorExample need to be labeled as `throws`.</li><li>DispatchQueue.backgroundReference: [Apple Developer: Documentation: Dispatch: DispatchQueue](https://developer.apple.com/documentation/dispatch/dispatchqueue/2300077-global)<br></li></ul>,DispatchQueue.global
"<b> What is the inferred type of x?</b><br><br>```swift<br>let x = [""a"", ""b"", ""c""]<br>```<br><br><ul><li>`String[]`</li><li>`Array<String>`</li><li>`Set<String>`</li><li>`Array<Character>`Reference: [_The Swift Programming Language: Language Guide: Collection Types: Arrays_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107)<br></li></ul>",`Array<String>`
"<b> What is the value of `oThings` after this code is executed?</b><br><br>```swift<br>let nThings: [Any] = [1, ""2"", ""three""]<br>let oThings = nThings.reduce("""") { ""\($0)\($1)"" }<br>```<br><br><ul><li>11212three</li><li>115</li><li>12three</li><li>Nothing, this code is invalid.Reference: [Apple Developer: Documentation: Swift: Array: reduce(\_:\_:)](<https://developer.apple.com/documentation/swift/array/reduce(_:_:)>)<br></li></ul>",12three
<b> How would you call a function that throws errors and also returns a value?</b><br><ul><li>`!try`</li><li>`try?`</li><li>`try!`</li><li>`?try`Reference: [_The Swift Programming Language: Language Guide: Error Handling: Handling Errors_](https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512)<br></li></ul>,`try?`
"<b> What is wrong with this code?</b><br><br>```swift<br>protocol TUI {<br>func add(x1: Int, x2: Int) -> Int {<br>return x1 + x2<br>}<br>}<br>```<br><br><ul><li>Protocol functions cannot have return types.</li><li>Protocol functions cannot have implementations.</li><li>Nothing is wrong with it.</li><li>`add` is a reserved keyword.Reference:<br>- [_The Swift Programming Language: Language Guide: Protocols: Method Requirements_](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID270)<br>- [_The Swift Programming Language: Language Guide: Protocols: Protocol Extensions_](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID521)<br></li></ul>",Protocol functions cannot have implementations.
"<b> In this code, what are `wheels` and `doors` examples of?</b><br><br>```swift<br>class Car {<br>var wheels: Int = 4<br>let doors = 4<br>}<br>```<br><br><ul><li>Class members</li><li>This code is invalid</li><li>Class fields</li><li>Class propertiesReference:<br>- [_The Swift Programming Language: Language Guide: Structures and Classes_](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)<br>- [_The Swift Programming Language: Language Guide_](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID255)<br></li></ul>",Class propertiesReference:<br>- [_The Swift Programming Language: Language Guide: Structures and Classes_](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)<br>- [_The Swift Programming Language: Language Guide_](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID255)<br>
<b> How do you designated a failable initializer?</b><br><ul><li>You cannot</li><li>`deinit`</li><li>`init?`</li><li>`init`Reference:<br>- [_The Swift Programming Language: Language Guide: Initialization_](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224)<br>- [_The Swift Programming Language: Language Guide: Deinitialization_](https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html)<br></li></ul>,`init?`
"<b> What is printed when this code is executed?</b><br><br>```swift<br>let dbl = Double.init(""5a"")<br>print(dbl ?? "".asString()"")<br>```<br><br><ul><li>`five`</li><li>`5a`</li><li>`.asString()`</li><li>`5`Reference:<br>- [_The Swift Programming Language: Language Guide: Basic Operators: Nil-Coalescing Operator_](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72)<br>- [_The Swift Programming Language: Language Guide: Initialization: Failable Initializers_](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224)<br></li></ul>",`.asString()`
"<b> In the function below, what are `this` and `toThat` examples of?</b><br><br>```swift<br>func add(this x: Int, toThat y: Int) { }<br>```<br><br><ul><li>None of these answers</li><li>Local terms</li><li>Argument labels</li><li>Parameters namesReference: [_The Swift Programming Language: Language Guide: Functions_](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166)<br></li></ul>",Argument labels
"<b> What is wrong with this code?</b><br><br>```swift<br>for (key, value) in [1: ""one"", 2: ""two""] {<br>print(key, value)<br>}<br>```<br><br><ul><li>The interaction source is invalid</li><li>The interaction variable is invalid</li><li>There is nothing wrong with this code</li><li>The comma in the print is misplacedReference: [_The Swift Programming Language: Language Guide: Control Flow: For-In Loops_](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121)<br></li></ul>",There is nothing wrong with this code
<b> Which of these choices is associated with unit testing?</b><br><ul><li>`XCTest`</li><li>All of these answers</li><li>`@testable`</li><li>`XCTAssert`Reference:<br>- [Apple Developer: Documentation: XCTest: XCTest](https://developer.apple.com/documentation/xctest/xctest)<br>- [Apple Developer: Documentation: XCTest: Boolean Assertions: XCTAssert(\_:\_:file:line:)](https://developer.apple.com/documentation/xctest/1500669-xctassert)<br>- [_The Swift Programming Language: Language Guide: Access Control: Access Levels_](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html#ID5)<br></li></ul>,All of these answers
"<b> In the code below, what is width an example of?</b><br><br>```swift<br>class Square {<br>var height: Int = 0<br>var width: Int {<br>return height<br>}<br>}<br>```<br><br><ul><li>This code contains error</li><li>A closure</li><li>A computed property</li><li>Lazy loadingReference:<br>- [_The Swift Programming Language: Language Guide: Properties: Stored Properties_](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID255)<br>- [_The Swift Programming Language: Language Guide: Properties: Computed Properties_](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259)<br>- [_The Swift Programming Language: Language Guide: Closures: Trailing Closures_](https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID102)<br></li></ul>",A computed property
"<b> What data type is this an example of?</b><br><br>```swift<br>let vals = (""val"", 1)<br>```<br><br><ul><li>A dictionary</li><li>A tuple</li><li>An optional</li><li>This code contains errorReference:<br>- [_The Swift Programming Language: Language Guide: The Basics_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID329)<br>- [_The Swift Programming Language: Language Reference: Types_](https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_tuple-type)<br></li></ul>",A tuple
<b> What is wrong with this code?</b><br><br>```swift<br>var x = 5<br>x = 10.0<br>```<br><br><ul><li>You cannot assign a Double to a variable of type Int</li><li>`x` is undefined</li><li>`x` is a constant</li><li>`x` has no typeReference: [_The Swift Programming Language: Language Guide: The Basics_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322)<br></li></ul>,You cannot assign a Double to a variable of type Int
"<b> What will this code print to the console?</b><br><br>```swift<br>var items = [""a"": 1, ""b"": 2, ""c"": ""test""] as [String: Any]<br>items[""c""] = nil<br>print(items[""c""] as Any)<br>```<br><br><ul><li>Any</li><li>test</li><li>1,2,3</li><li>nilReferences:<br>- [_The Swift Programming Language: Language Guide: Type Casting: Type Casting for Any and AnyObject_](https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342)<br>- [_The Swift Programming Language: Language Guide: Collection Types: Dictionaries_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID113)<br></li></ul>",nilReferences:<br>- [_The Swift Programming Language: Language Guide: Type Casting: Type Casting for Any and AnyObject_](https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342)<br>- [_The Swift Programming Language: Language Guide: Collection Types: Dictionaries_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID113)<br>
<b> What is wrong with this code?</b><br><br>```swift<br>let val = 5.0 + 10<br>```<br><br><ul><li>There is nothing wrong with this code</li><li>`val` is a constant and cannot be changed</li><li>`5.0` and `10` are different types</li><li>There is no semicolonReference: [_The Swift Programming Language: Language Guide: The Basics: Type Safety and Type Inference_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322)<br></li></ul>,There is nothing wrong with this code
<b> How many parameters does the initializer for Test have?</b><br><br>```swift<br>struct Test {<br>var score: Int<br>var date: Date<br>}<br>```<br><br><ul><li>Zero</li><li>This code contains an error</li><li>Two</li><li>Structs do not have initializersReference: [_The Swift Programming Language: Language Guide: Initialization_](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID213)<br></li></ul>,Two
"<b> What prints to the console when executing this code?</b><br><br>```swift<br>let x = try? String.init(""test"")<br>print(x)<br>```<br><br><ul><li>nil</li><li>Nothing - this code contains an error</li><li>Optional(""test"")</li><li>testReferences:<br>- [_The Swift Programming Language: Language Guide: Error Handling: Handling Errors_](https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512)<br>- [_The Swift Programming Language: Language Guide: The Basics: Optionals_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330)<br></li></ul>","Optional(""test"")"
"<b> How can you sort this array?</b><br><br>```swift<br>var vals = [1, 2, 3]<br>```<br><br><ul><li>`vals.sort { $0 < $1 }`</li><li>`vals.sort { (s1, s2) in s1 < s2 }`</li><li>`vals.sort(by: <)`</li><li>All of these answersReference: [Apple Developer: Documentation: Swift: Array: sort()](<https://developer.apple.com/documentation/swift/array/sort()>)<br></li></ul>",All of these answersReference: [Apple Developer: Documentation: Swift: Array: sort()](<https://developer.apple.com/documentation/swift/array/sort()>)<br>
<b> DispatchQueue.main.async takes a block that will be</b><br><ul><li>Not executed</li><li>Executed in the main queue</li><li>None of these answers</li><li>Executed on the background threadReference: [Apple Developer: Documentation: Dispatch: DispatchQueue: async(group:qos:flags:execute:)](https://developer.apple.com/documentation/dispatch/dispatchqueue/2016098-async)<br></li></ul>,Executed in the main queue
<b> When is deinit called?</b><br><ul><li>When a class instance needs memory</li><li>All of these answers</li><li>When the executable code is finished</li><li>When a class instance is being removed from memoryReference: [_The Swift Programming Language: Language Guide: Deinitialization_](https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html)<br></li></ul>,When a class instance is being removed from memoryReference: [_The Swift Programming Language: Language Guide: Deinitialization_](https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html)<br>
<b> How do you declare an optional String?</b><br><ul><li>`String?`</li><li>`Optional[String]`</li><li>`[String]?`</li><li>`?String`Reference: [_The Swift Programming Language: Language Guide: The Basics: Optionals_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330)<br></li></ul>,`String?`
"<b> How many times this code will be executed? / How many times will this loop be performed?</b><br><br>```swift<br>for i in [""0"", ""1""] {<br>print(i)<br>}<br>```<br><br><ul><li>One</li><li>Two</li><li>Three</li><li>This code does not compileReference: [_The Swift Programming Language: Language Guide: Control Flow: For-In Loops_](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121)<br></li></ul>",Two
"<b> What does this code print?</b><br><br>```swift<br>let names = [""Bear"", ""Tony"", ""Svante""]<br>print(names[1] + ""Bear"")<br>```<br><br><ul><li>1Bear</li><li>BearBear</li><li>TonyBear</li><li>Nothing, this code is invalidReferences:<br>- [_The Swift Programming Language: Language Guide: Collection Types: Arrays_](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107)<br>- [_The Swift Programming Language: Language Guide: Strings and Characters: Concatenating Strings and Characters_](https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID291)<br></li></ul>",TonyBear
<b> What is true of this code?</b><br><br>```swift<br>let name: String?<br>```<br><br><ul><li>`name` can hold only a string value.</li><li>`name` can hold either a string or nil value.</li><li>Optional values cannot be `let` constants.</li><li>Only non-empty string variables can be stored in `name`.Reference: [_The Swift Programming Language: Language Guide: The Basics: Optionals_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330)<br></li></ul>,`name` can hold either a string or nil value.
<b> What is the value of `val` after this code is executed?</b><br><br>```swift<br>let i = 5<br>let val = i * 6.0<br>```<br><br><ul><li>This code is invalid.</li><li>6</li><li>30</li><li>0Reference: [_The Swift Programming Language: Language Guide: The Basics: Type Safety and Type Inference_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322)<br></li></ul>,This code is invalid.
"<b> What does this code print?</b><br><br>```swift<br>enum Positions: Int {<br>case first, second, third, other<br>}<br>print (Positions.other.rawValue)<br>```<br><br><ul><li>3</li><li>0</li><li>other</li><li>nilReference: [_The Swift Programming Language: Language Guide: The Basics: Raw Values_](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID149)<br></li></ul>",3
"<b> What is printed to the console when this code is executed?</b><br><br>```swift<br>""t"".forEach { (char) in<br>print(char)<br>}<br>```<br><br><ul><li>nil</li><li>Nothing, since the code contains an error</li><li>t</li><li>zeroReferences:<br>- [_The Swift Programming Language: Language Guide: Strings and Characters: Working with Characters_](https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID290)<br>- [Apple Developer: Documentation: Swift: String: forEach(\_:)](<https://developer.apple.com/documentation/swift/string/foreach(_:)>)<br></li></ul>",t
"<b> What prints when this code is executed?</b><br><br>```swift<br>let s1 = [""1"", ""2"", ""3""]<br>.filter { $0 > ""0"" }<br>.sorted { $0 > $1 }<br>print(s1)<br>```<br><br><ul><li>[]</li><li>[""3"", ""2"", ""1""]</li><li>[321]</li><li>[""1"", ""2"", ""3""]References:<br>- [Apple Developer: Documentation: Swift: Swift Standard Library: Collections: Sequence and Collection Protocols: Sequence: filter()](<https://developer.apple.com/documentation/swift/sequence/filter(_:)>)<br>- [Apple Developer: Documentation: Swift: Array: sorted()](<https://developer.apple.com/documentation/swift/array/sorted()>)<br></li></ul>","[""3"", ""2"", ""1""]"
<b> What enumeration feature allows them to store case-specific data?</b><br><ul><li>Associated values</li><li>Integral values</li><li>Raw values</li><li>Custom valuesReference: [_The Swift Programming Language: Language Guide: Enumerations: Associated Values_](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID148)<br></li></ul>,Associated values
"<b> In the code below, AOM must be a(n)?</b><br><br>```swift<br>class AmP: MMM, AOM { }<br>```<br><br><ul><li>Class</li><li>Protocol</li><li>Enumeration</li><li>StructReferences:<br>- [_The Swift Programming Language: Language Guide: Inheritance: Subclassing_](https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID195)<br>- [_The Swift Programming Language: Language Guide: Protocols: Protocol Syntax_](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID268)<br></li></ul>",Protocol
"<b> What is the value of numbers in the code below?</b><br><br>```swift<br>let numbers = [1, 2, 3, 4, 5, 6].filter { $0 % 2 == 0 }<br>```<br><br><ul><li>[1, 3, 5]</li><li>[]</li><li>[2, 4, 6]</li><li>nilReference: [Apple Developer: Documentation: Swift: Swift Standard Library: Collections: Sequence and Collection Protocols: Sequence: filter()](<https://developer.apple.com/documentation/swift/sequence/filter(_:)>)<br></li></ul>","[2, 4, 6]"
"<b> What is the type of `vals` in this code?</b><br><br>```swift<br>let vals = [""a"", 1, ""Hi""]<br>```<br><br><ul><li>Array(char)</li><li>[Any]</li><li>Array<char></li><li>[Generic]Reference: [_The Swift Programming Language: Language Guide: Type Casting_](https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342)<br></li></ul>",[Any]
"<b> How can you extract val to `x` in tuple `vt`</b><br><br>```swift<br>let vt = (name: ""ABC"", val: 5)<br>```<br><br><ul><li>let x = vt.1</li><li>All of these answers</li><li>let x = vt.val</li><li>let (`_`, x) = vtReference: [_The Swift Programming Language: Language Guide: The Basics: Tuples_](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID329)<br></li></ul>",All of these answers
<b> What is the type of x?</b><br><br>```swift<br>let x = try? String.init(from: decoder)<br>```<br><br><ul><li>String</li><li>String?</li><li>String!</li><li>try?Reference: [_The Swift Programming Language: Language Guide: Error Handling: Handling Errors_](https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512)<br></li></ul>,String?
<b> How many times is this loop executed?</b><br><br>```swift<br>let loopx = 5<br>repeat {<br>print (loopx)<br>} while loopx < 6<br>```<br><br><ul><li>Six</li><li>Zero</li><li>Five</li><li>InfiniteReference: [_The Swift Programming Language: Language Guide: Control Flow: While Loops_](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID124)<br></li></ul>,InfiniteReference: [_The Swift Programming Language: Language Guide: Control Flow: While Loops_](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID124)<br>
