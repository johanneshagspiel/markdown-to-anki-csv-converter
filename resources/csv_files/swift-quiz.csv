<b> What is this code an example of?</b><br><br>```swift<br>let val = (Double)6<br>```<br><br><ul><li>a syntax issue</li><li>typecasting</li><li>assignment</li><li>initialization</li></ul>,a syntax issue
<b> What is the error in this code?</b><br><br>```swift<br>let x = 5<br>guard x == 5 { return }<br>```<br><br><ul><li>The guard is missing the else.</li><li>Nothing is wrong.</li><li>The guard is missing a then.</li><li>The comparison is wrong.</li></ul>,The guard is missing the else.
"<b> What is the raw/underlying type of this enum?</b><br><br>```swift<br>enum Direction {<br>case north, south, east, west<br>}<br>```<br><br><ul><li>There is none.</li><li>String</li><li>Any</li><li>Int</li></ul>",There is none.
<b> Why is dispatchGroup used in certain situations?</b><br><ul><li>It allows multiple synchronous or asynchronous operations to run on different queues.</li><li>It allows track and control execution of multiple operations together.</li><li>It allows operations to wait for each other as desired.</li><li>all of these answers.</li></ul>,all of these answers.
"<b> What is this code an example of?</b><br><br>```swift<br>let val = 5<br>print(""value is: \(val)"")<br>```<br><br><ul><li>string interpolation</li><li>string compilation</li><li>method chaining</li><li>string concatenation</li></ul>",string interpolation
"<b> What are the contents of `vals` after this code is executed?</b><br><br>```swift<br>var vals = [10, 2]<br>vals.sort { (s1, s2) -> Bool in<br>s1 > s2<br>}<br>```<br><br><ul><li>[10, 2]</li><li>[2, 10]</li><li>nil</li><li>This code contains an error</li></ul>","[10, 2]"
"<b> What does this code print?</b><br><br>```swift<br>typealias Thing = [String:Any]<br>var stuff: Thing<br>print(type(of: stuff))<br>```<br><br><ul><li>Dictionary<String, Any></li><li>Dictionary</li><li>ERROR</li><li>Thing</li></ul>","Dictionary<String, Any>"
"<b> What is the value of y?</b><br><br>```swift<br>let x = [""1"", ""2""].dropFirst()<br>let y = x[0]<br>```<br><br><ul><li>This code contains an error</li><li>1</li><li>2</li><li>nil</li></ul>",This code contains an error
<b> What is the value of test in this code?</b><br><br>```swift<br>var test = 1 == 1<br>```<br><br><ul><li>TRUE</li><li>YES</li><li>1</li><li>This code contains an error</li></ul>,TRUE
<b> What is the value of y?</b><br><br>```swift<br>var x: Int?<br>let y = x ?? 5<br>```<br><br><ul><li>5</li><li>0</li><li>nil</li><li>This code contains an error</li></ul>,5
"<b> What is the type of this function?</b><br><br>```swift<br>func add(a: Int, b: Int) -> Int { return a+b }<br>```<br><br><ul><li>Int</li><li>(Int, Int) -> Int</li><li>Int<Optional></li><li>Functions don't have types.</li></ul>","(Int, Int) -> Int"
"<b> What is the correct way to call this function?</b><br><br>```swift<br>func myFunc(_ a: Int, b: Int) -> Int {<br>return a + b<br>}<br>```<br><br><ul><li>myFunc(5, b: 6)</li><li>myFunc(5, 6)</li><li>myFunc(a: 5, b: 6)</li><li>myFunc(a, b)</li></ul>","myFunc(5, b: 6)"
<b> The Codable protocol is **\_**?</b><br><ul><li>a combination of Encodable and Decodable</li><li>not a true protocol <<<<---Possibly correct as it's a typealias of Encodable and Decodable</li><li>required of all classes</li><li>automatically included in all classes</li></ul>,a combination of Encodable and Decodable
"<b> What is the type of value</b><br><br>```swift<br>let value1 = ""\(""test"".count)""<br>```<br><br><ul><li>String</li><li>Int</li><li>null</li><li>test.count</li></ul>",String
"<b> When a function takes a closure as a parameter, when do you want to mark is as escaping?</b><br><ul><li>when it's executed after the function returns</li><li>when it's scope is undefined</li><li>when it's lazy loaded</li><li>all of these answers</li></ul>",when it's executed after the function returns
<b> What's wrong with this code?</b><br><br>```swift<br>class Person {<br>var name: String<br>var address: String<br>}<br>```<br><br><ul><li>Person has no initializers.</li><li>Person has no base class.</li><li>var name is not formatted corrrectly.</li><li>address is a keyword.</li></ul>,Person has no initializers.
"<b> What is the value of names after this code is executed?</b><br><br>```swift<br>let names = [""Bear"", ""Joe"", ""Clark""]<br>names.map { (s) -> String in<br>return s.uppercased()<br>}<br>```<br><br><ul><li>[""BEAR"", ""JOE"", ""CLARK""]</li><li>[""B"", ""J"", ""C""]</li><li>[""Bear"", ""Joe"", ""Clark""]</li><li>This code contains an error.</li></ul>","[""Bear"", ""Joe"", ""Clark""]"
<b> What describes this line of code?</b><br><br>```swift<br>let val = 5<br>```<br><br><ul><li>a constant named val of type Int</li><li>a variable named val of type item</li><li>a constant named val of type Number</li><li>a variable named val of type Int</li></ul>,a constant named val of type Int
"<b> What is the error in this code?</b><br><br>```swift<br>extension String {<br>var firstLetter: Character = ""c"" {<br>didSet {<br>print(""new value"")<br>}<br>}<br>}<br>```<br><br><ul><li>Extensions can't add properties. // although extensions technically can't contain stored properties</li><li>Nothing is wrong with it.</li><li>didSet takes a parameter.</li><li>c is not a character.</li></ul>",Extensions can't add properties. // although extensions technically can't contain stored properties
<b> didSet and willSet are examples of **\_**?</b><br><ul><li>property observers</li><li>key properties</li><li>all of these answers</li><li>newOld value calls</li></ul>,property observers
<b> What is wrong with this code?</b><br><br>```swift<br>self.callback = {<br>self.attempts += 1<br>self.downloadFailed()<br>}<br>```<br><br><ul><li>Use of self inside the closure causes retain cycle.</li><li>You cannot assign a value to closure in this manner.</li><li>You need to define the type of closure explicitly.</li><li>There is nothing wrong with this code.</li></ul>,Use of self inside the closure causes retain cycle.
"<b> How many values does vals have after this code is executed?</b><br><br>```swift<br>var vals = Set<String> = [""4"", ""5"", ""6""]<br>vals.insert(""5"")<br>```<br><br><ul><li>three</li><li>four</li><li>eight</li><li>This code contains an error.</li></ul>",This code contains an error.
"<b> How can you avoid a strong reference cycle in a closure?</b><br><ul><li>Use a capture list to set class instances of weak or unowned.</li><li>You can't, there will always be a danger of strong reference cycles inside a closure.</li><li>Initialize the closure as read-only.</li><li>Declare the closure variable as lazy.</li></ul>",Use a capture list to set class instances of weak or unowned.
"<b> What is wrong with this code?</b><br><br>```swift<br>if let s = String.init(""some string"") {<br>print(s)<br>}<br>```<br><br><ul><li>This String initializer does not return an optional.</li><li>String does not have an initializer that can take a String.</li><li>= is not a comparison.</li><li>Nothing is wrong with this code.</li></ul>",This String initializer does not return an optional.
<b> Which code snippet correctly creates a typealias closure?</b><br><ul><li>typealias CustomClosure: () -> ()</li><li>typealias CustomClosure { () -> () }</li><li>typealias CustomClosure -> () -> ()</li><li>typealias CustomClosure -> () {}</li></ul>,typealias CustomClosure: () -> ()
<b> How do you reference class members from within a class?</b><br><ul><li>self</li><li>instance</li><li>class</li><li>this</li></ul>,self
<b> All value types in Swift are **\_** under the hood?</b><br><ul><li>structs</li><li>classes</li><li>optionals</li><li>generics</li></ul>,structs
"<b> What is the correct way to add a value to this array?</b><br><br>```swift<br>var strings = [1, 2, 3]<br>```<br><br><ul><li>all of these answers</li><li>strings.append(4)</li><li>strings.insert(5, at: 1)</li><li>strings += [5]</li></ul>",all of these answers
<b> How many times will this loop be executed?</b><br><br>```swift<br>for i in 0...100 {<br>print(i)<br>}<br>```<br><br><ul><li>0</li><li>101</li><li>99</li><li>100</li></ul>,101
<b> What can AnyObject represent?</b><br><ul><li>an instance of any class</li><li>an instance of function type</li><li>all of these answers</li><li>an instance of an optional type</li></ul>,all of these answers
"<b> What is the value of t after this code is executed?</b><br><br>```swift<br>let names = [""Larry"", ""Sven"", ""Bear""]<br>let t = names.enumerated().first().offset<br>```<br><br><ul><li>This code is invalid.</li><li>This code does not compile.</li><li>0</li><li>1</li><li>Larry</li></ul>",<ul><li>This code is invalid.</li><li>This code does not compile.</li></ul>
"<b> What is the value of test after this code executes?</b><br><br>```swift<br>let vt = (name: ""ABC"", val: 5)<br>let test = vt.0<br>```<br><br><ul><li>ABC</li><li>0</li><li>5</li><li>name</li></ul>",ABC
<b> What is the base class in this code?</b><br><br>```swift<br>class LSN : MMM {<br>}<br>```<br><br><ul><li>MMM</li><li>LSN</li><li>There is no base class.</li><li>This code is invalid.</li></ul>,MMM
"<b> What does this code print to the console?</b><br><br>```swift<br>var userLocation: String = ""Home"" {<br>willSet(newValue) {<br>print(""About to set userLocation to \(newValue)..."")<br>}<br>didSet {<br>if userLocation != oldValue {<br>print(""userLocation updated with new value!"")<br>} else {<br>print(""userLocation already set to that value..."")<br>}<br>}<br>}<br>userLocation = ""Work""<br>```<br><br><ul><li>About to set userLocation to Work… userLocation updated with new value!</li><li>About to set userLocation to Work… userLocation already set to that value…</li><li>About to set userLocation to Home… userLocation updated to new value!</li><li>ERROR</li></ul>",About to set userLocation to Work… userLocation updated with new value!
<b> What must a convenience initializer call?</b><br><ul><li>a base class convenience initializer</li><li>either a designated or another convenience initializer</li><li>a designated initializer</li><li>none of these answers</li></ul>,a designated initializer
<b> Which object allows you access to specify that a block of code runs in a background thread?</b><br><ul><li>DispatchQueue.visible</li><li>DispatchQueue.global</li><li>errorExample need to be labeled as `throws`.</li><li>DispatchQueue.background</li></ul>,DispatchQueue.global
"<b> What is the inferred type of x?</b><br><br>```swift<br>let x = [""a"", ""b"", ""c""]<br>```<br><br><ul><li>`String[]`</li><li>`Array<String>`</li><li>`Set<String>`</li><li>`Array<Character>`</li></ul>",`Array<String>`
"<b> What is the value of `oThings` after this code is executed?</b><br><br>```swift<br>let nThings: [Any] = [1, ""2"", ""three""]<br>let oThings = nThings.reduce("""") { ""\($0)\($1)"" }<br>```<br><br><ul><li>11212three</li><li>115</li><li>12three</li><li>Nothing, this code is invalid.</li></ul>",12three
<b> How would you call a function that throws errors and also returns a value?</b><br><ul><li>`!try`</li><li>`try?`</li><li>`try!`</li><li>`?try`</li></ul>,`try?`
"<b> What is wrong with this code?</b><br><br>```swift<br>protocol TUI {<br>func add(x1 : Int, x2 : Int) -> Int {<br>return x1 + x2<br>}<br>}<br>```<br><br><ul><li>Protocol functions cannot have return types.</li><li>Protocol functions cannot have implementations.</li><li>Nothing is wrong with it.</li><li>`add` is a reserved keyword.</li></ul>",Protocol functions cannot have implementations.
"<b> In this code, what are `wheels` and `doors` examples of?</b><br><br>```swift<br>class Car {<br>var wheels: Int = 4<br>let doors = 4<br>}<br>```<br><br><ul><li>class members</li><li>This code is invalid.</li><li>class fields</li><li>class properties</li></ul>",class properties
<b> How do you designated a failable initializer?</b><br><ul><li>You cannot</li><li>deinit</li><li>`init?`</li><li>init</li></ul>,`init?`
"<b> What is printed when this code is executed?</b><br><br>```swift<br>let dbl = Double.init(""5a"")<br>print(dbl ?? "".asString()"")<br>```<br><br><ul><li>five</li><li>5a</li><li>`.asString()`</li><li>5</li></ul>",`.asString()`
"<b> In the function below, what are `this` and `toThat` examples of?</b><br><br>```swift<br>func add(this x: Int, toThat y: Int)->{}<br>```<br><br><ul><li>none of these answers</li><li>local terms</li><li>argument labels</li><li>parameters names</li></ul>",argument labels
"<b> What is wrong with this code?</b><br><br>```swift<br>for (key, value) in [1: ""one"", 2: ""two""]{<br>print(key, value)<br>}<br>```<br><br><ul><li>The interaction source is invalid</li><li>The interaction variable is invalid</li><li>There is nothing wrong with this code</li><li>The comma in the print is misplaced</li></ul>",There is nothing wrong with this code
<b> Which of these choices is associated with unit testing?</b><br><ul><li>XCTest</li><li>all of these answers</li><li>@testable</li><li>XCAssert</li></ul>,all of these answers
"<b> In the code below, what is width an example of?</b><br><br>```swift<br>class Square{<br>var height: Int = 0<br>var width : Int {<br>return height<br>}<br>}<br>```<br><br><ul><li>This code contains error</li><li>a closure</li><li>a computed property</li><li>lazy loading</li></ul>",a computed property
"<b> What data type is this an example of?</b><br><br>```swift<br>let vals = (""val"", 1)<br>```<br><br><ul><li>a dictionary</li><li>a tuple</li><li>an optional</li><li>This code contains error</li></ul>",a tuple
<b> What is wrong with this code?</b><br><br>```swift<br>var x = 5<br>x = 10.0<br>```<br><br><ul><li>You cannot assign a Double to a variable of type Int</li><li>x is undefined</li><li>x is a constant</li><li>x has no type</li></ul>,You cannot assign a Double to a variable of type Int
"<b> What will this code print to the console?</b><br><br>```swift<br>var items = [""a"":1, ""b"":2, ""c"":""test""] as [String: Any]<br>items[""c""] = nil<br>print(items[""c""] as Any)<br>```<br><br><ul><li>Any</li><li>test</li><li>1,2,3</li><li>nil</li></ul>",nil
<b> What is wrong with this code?</b><br><br>```swift<br>let val = 5.0 + 10<br>```<br><br><ul><li>There is nothing wrong with this code</li><li>val is a constant and cannot be changed</li><li>5.0 and 10 are different types</li><li>There is no semicolon</li></ul>,There is nothing wrong with this code
<b> How many parameters does the initializer for Test have?</b><br><br>```swift<br>struct Test{<br>var score: Int<br>var date: Date<br>}<br>```<br><br><ul><li>zero</li><li>This code contains an error</li><li>two</li><li>Structs do not have initializers</li></ul>,two
"<b> What prints to the console when executing this code?</b><br><br>```swift<br>let x = try? String.init(""test"")<br>print(x)<br>```<br><br><ul><li>nil</li><li>Nothing - this code contains an error</li><li>Optional(""test"")</li><li>test</li></ul>","Optional(""test"")"
"<b> How can you sort this array?</b><br><br>```swift<br>var vals = [1,2,3]<br>```<br><br><ul><li>`vals.sort { $0 < $1 }`</li><li>`vals.sort { (s1, s2) in s1 < s2 }`</li><li>`vals.sort(by: <)`</li><li>all of these answers</li></ul>",all of these answers
<b> DispatchQueue.main.async takes a block that will be</b><br><ul><li>not executed</li><li>executed in the main queue</li><li>none of these answers</li><li>executed on the background thread</li></ul>,executed in the main queue
<b> When is deinit called?</b><br><ul><li>When a class instance needs memory</li><li>All of these answers</li><li>When the executable code is finished</li><li>When a class instance is being removed from memory</li></ul>,All of these answers
<b> How do you declare an optional String?</b><br><ul><li>String?</li><li>Optional[String]</li><li>[String]?</li><li>?String</li></ul>,String?
"<b> How many times this code will be executed? —OR— How many times will this loop be performed?</b><br><br>```swift<br>for i in [""0"", ""1""]{<br>print(i)<br>}<br>```<br><br><ul><li>one</li><li>two</li><li>three</li><li>This code does not compile</li></ul>",two
"<b> What does this code print?</b><br><br>```swift<br>let names = [""Bear"", ""Tony"", ""Svante""]<br>print(names[1]+""Bear"")<br>```<br><br><ul><li>1Bear</li><li>BearBear</li><li>TonyBear</li><li>Nothing, this code is invalid</li></ul>",TonyBear
<b> What is true of this code?</b><br><br>```swift<br>let name: String?<br>```<br><br><ul><li>name can hold only a string value.</li><li>name can hold either a string or nil value.</li><li>Optional values cannot be `let` constants.</li><li>Only non-empty string variables can be stored in name.</li></ul>,name can hold either a string or nil value.
<b> What is the value of `val` after this code is executed?</b><br><br>```swift<br>let i = 5<br>let val = i * 6.0<br>```<br><br><ul><li>This code is invalid.</li><li>6</li><li>30</li><li>0</li></ul>,This code is invalid.
"<b> What does this code print?</b><br><br>```swift<br>enum Positions : Int {<br>case first, second, third, other<br>}<br>print (Positions.other.rawValue)<br>```<br><br><ul><li>3</li><li>0</li><li>other</li><li>nil</li></ul>",3
"<b> What is printed to the console when this code is executed?</b><br><br>```swift<br>""t"".forEach { (char) in<br>print(char)<br>}<br>```<br><br><ul><li>nil</li><li>Nothing, since the code contains an error</li><li>t</li><li>zero</li></ul>",t
"<b> What prints when this code is executed?</b><br><br>```swift<br>let s1 = [""1"", ""2"", ""3""]<br>.filter { $0 > ""0"" }<br>.sorted { $0 > $1 }<br>print(s1)<br>```<br><br><ul><li>[]</li><li>[""3"", ""2"", ""1""]</li><li>[321]</li><li>[""1"", ""2"", ""3""]</li></ul>","[""3"", ""2"", ""1""]"
<b> What enumeration feature allows them to store case-specific data?</b><br><br>(Question does not make that much sense though. )<br><br><ul><li>associated values</li><li>integral values</li><li>raw values</li><li>custom values</li></ul>,associated values
"<b> In the code below, AOM must be a(n)?</b><br><br>```swift<br>class AmP : MMM, AOM {<br>}<br>```<br><br><ul><li>class</li><li>protocol</li><li>enumeration</li><li>struct</li></ul>",protocol
"<b> What is the value of numbers in the code below?</b><br><br>```swift<br>let numbers = [1,2,3,4,5,6].filter{ $0 % 2 == 0}<br>```<br><br><ul><li>[1,3,5]</li><li>[]</li><li>[2,4,6]</li><li>nil</li></ul>","[2,4,6]"
"<b> What is the type of `vals` in this code?</b><br><br>```swift<br>let vals = [""a"", 1, ""Hi""]<br>```<br><br><ul><li>Array(char)</li><li>[Any]</li><li>Array<char></li><li>[Generic]</li></ul>",[Any]
