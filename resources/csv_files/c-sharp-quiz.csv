"<b> In which of these situations are interfaces better than abstract classes?</b><br><ul><li>When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.</li><li>Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.</li><li>When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.</li><li>You should use both an interface and an abstract class when defining any complex object.</li></ul>","When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class."
<b> Which statement is true of delegates?</b><br><ul><li>Delegates are not supported in the current version of C#</li><li>They cannot be used as callbacks.</li><li>Only variables can be passed to delegates as parameters.</li><li>They can be chained together.</li></ul>,They can be chained together.<br><br>[Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/#delegates-overview)<br>
<b> Which choice best defines C#'s asynchronous programming model?</b><br><ul><li>reactive</li><li>inherited callback</li><li>task-based</li><li>callback-based</li></ul>,task-based<br><br>[Official documentation: Task asynchronous programming model](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model)<br>
"<b> How would you determine if a class has a particular attribute?</b><br><ul><li>.```cs<br>var type = typeof(SomeType);<br>var attribute = type.GetCustomAttribute<SomeAttribute>();<br>```<br></li><li>.```cs<br>var typeof(MyPresentationModel).Should().BeDecoratedWith<SomeAttribute>();<br>```<br></li><li>.```cs<br>Attribute.GetCustomAttribute, typeof(SubControllerActionToViewDataAttribute)<br>```<br></li><li>.```cs<br>Attribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))<br>```<br></li></ul>",".```cs<br>Attribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))<br>```<br><br><br>[Official documentation: Attribute Class](https://docs.microsoft.com/en-us/dotnet/api/system.attribute?view=net-5.0)<br>[Official documentation: Attribute.GetCustomAttribute Method](https://docs.microsoft.com/en-us/dotnet/api/system.attribute.getcustomattribute?view=net-5.0)<br>"
"<b> What is the difference between the ref and out keywords?</b><br><ul><li>Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.</li><li>Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.</li><li>Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.</li><li>Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.</li></ul>","Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.<br><br>[Official documentation: ref](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref)<br>[Official documentation: out parameter modifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier)<br>"
"<b> How could you retrieve information about a class, as well as create an instance at runtime?</b><br><ul><li>reflection</li><li>serialization</li><li>abstraction</li><li>dependency injection</li></ul>",reflection<br><br>[Official documentation: Reflection ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection)<br>
<b> What is this code an example of?</b><br><br>```cs<br>private static object objA;<br>private static object objB;<br>private static void performTaskA()<br>{<br>lock (objB)<br>{<br>Thread.Sleep(1000);<br>lock (objA) { }<br>}<br>}<br>private static void PerformTaskB()<br>{<br>lock (objA)<br>{<br>lock (objB) { }<br>}<br>}<br>```<br><br><ul><li>a private class that uses multithreading</li><li>multithread coding</li><li>thread mismanagement</li><li>a potential deadlock</li></ul>,a potential deadlock<br><br>[Official documentation: Deadlocks and race conditions](https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions)<br>
<b> What is the difference between an anonymous type and a regular data type?</b><br><ul><li>Anonymous types don't have type names</li><li>Anonymous types can only be static</li><li>Anonymous types can be used only in struts</li><li>Anonymous types don't work with LINQ.</li></ul>,Anonymous types don't have type names<br><br>[Official documentation: Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types)<br>
"<b> When would you use a Dictionary rather that an Array type in your application?</b><br><ul><li>when you need a jagged collection structure</li><li>when you need to store values of the same type</li><li>when you need to store key-value pairs rather than single values</li><li>when you need an ordered, searchable list</li></ul>","when you need to store key-value pairs rather than single values<br><br>[Official documentation: Dictionary<TKey,TValue> Class](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=net-5.0)<br>"
<b> What is the difference between a.Equals(b) and a == b?</b><br><ul><li>The .Equals method compares reference identities while the == compares contents.</li><li>The .Equals method compares primitive values while == compares all values.</li><li>The .Equals method compares contents while == compares references reference identity.</li><li>The .Equals method compares reference type while == compares primitive value types.</li></ul>,The .Equals method compares contents while == compares references reference identity.
<b> Which choice best describes a deadlock situation?</b><br><ul><li>when you try to instantiate two objects at the same time in the same class or struct</li><li>when you are trying to execute an action after a user event is registered</li><li>when simultaneous instructions are waiting on each other to finish before executing</li><li>when you try to execute a series of events simultaneously on multiple threads</li></ul>,when simultaneous instructions are waiting on each other to finish before executing<br><br>[Official documentation: Deadlocks and race conditions](https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions)<br>
<b> How does the async keyword work?</b><br><ul><li>It allows access to asynchronous methods in the C# API</li><li>It allows thread pooling and synchronous processes in static classes.</li><li>It allows the await keyword to be used in a method</li><li>It allows access to synchronous methods in the C# API</li></ul>,It allows the await keyword to be used in a method<br><br>[Official documentation: async](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async)<br>
"<b> What is an object in C#?</b><br><ul><li>a class or struct, including its variables and functions</li><li>a primitive data type that can be created only at compile time</li><li>a value type that can be used only with an abstract class</li><li>an instance of a class or struct that includes fields, properties, and/or methods</li></ul>","an instance of a class or struct that includes fields, properties, and/or methods<br><br>[Official documentation: Objects](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/objects)<br>"
"<b> Which code snippet declares an anonymous type named userData?</b><br><ul><li>`var<<!---->T> userData = new <<!---->T> { name = ""John"", age = 32 };`</li><li>`var userData = new { name = ""John"", age = 32 };`</li><li>`AType userData = new AType { name = ""John"", age = 32 };`</li><li>`Anonymous<T> userData = new Anonymous<T> { name = ""John"", age = 32 };`</li></ul>","`var userData = new { name = ""John"", age = 32 };`<br><br>[Official documentation: Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types)<br>"
<b> What will be returned when this method is executed?</b><br><br>`public void userInput(string charParamters) { }`<br><br><ul><li>nothing</li><li>a Boolean</li><li>a string variable</li><li>an integer</li></ul>,nothing<br><br>[Official documentation: void](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/void)<br>
"<b> In what order would the employee names in this example be printed to the console?</b><br><br>```cs<br>string[] employees = { ""Joe"", ""Bob"", ""Carol"", ""Alice"", ""Will"" };<br>IEnumerable<string> employeeQuery = from person in employees<br>orderby person<br>select person;<br>foreach(string employee in employeeQuery)<br>{<br>Console.WriteLine(employee);<br>}<br>```<br><br><ul><li>ascending</li><li>unordered</li><li>descending</li><li>first in, first out</li></ul>",ascending<br><br>[dotnetpattern: LINQ OrderBy Operator](http://dotnetpattern.com/linq-orderby-operator)<br>
<b> Lambda expressions are often used in tandem with which of the following?</b><br><ul><li>Namespaces</li><li>LINQ</li><li>Type Aliasing</li><li>Assemblies</li></ul>,LINQ<br><br>[Official documentation: Language Integrated Query (LINQ) Overview](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/)<br>
<b> What is the correct formatting for single line and multiline comments?</b><br><ul><li>/_/ - Single Line/_ - Multiline<br></li><li>// Multiline/_ Single Line _/<br></li><li>//\* Multiline/ Single Line<br></li><li>// Single Line/_ Multiline _/<br></li></ul>,// Single Line/_ Multiline _/<br><br><br>[w3schools: C# Comments](https://www.w3schools.com/cs/cs_comments.php)<br>
<b> How do you make a method in an abstract class overridable?</b><br><ul><li>Make it public</li><li>Make it static</li><li>Make it private</li><li>Make it virtual</li></ul>,Make it virtual<br><br>[Official documentation: virtual](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual)<br>[Official documentation: abstract](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract)<br>
"<b> How would you write code for an integer property called Age with a getter and setter?</b><br><ul><li>public int Age { get - set }</li><li>public int Age: get set;</li><li>public int Age (get, set );</li><li>public int Age { get; set; }</li></ul>",public int Age { get; set; }<br><br>[Official documentation: Using Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties)<br>
<b> What is an abstract class?</b><br><ul><li>a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)</li><li>something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class</li><li>a class that is denoted by the virtual keyword</li><li>a class that can be used only as base class</li></ul>,a class that can be used only as base class<br><br>[Official documentation: Abstract and Sealed Classes and Class Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members)<br>
<b> When using a thread pool what happens to a given thread after it finishes its task?</b><br><ul><li>The thread is destroyed and memory is freed up.</li><li>The thread runs in loop until the next assignment.</li><li>The thread goes inactive in the background and waits for garbage collection.</li><li>The thread returns to the pool for reuse.</li></ul>,The thread returns to the pool for reuse.<br><br>[Official documentation: Thread pool characteristics](https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool#thread-pool-characteristics)<br>
<b> Which choice represents a class that inherits behavior from a base class?</b><br><ul><li>a second base class</li><li>a revised class</li><li>a derived class</li><li>a parent class</li></ul>,a derived class<br><br>[Official documentation: Inheritance](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance)<br>
<b> What does operator overloading allow you to do?</b><br><ul><li>hide built-in operatores when necessary</li><li>add methods to be interpreted by the compiler at runtime</li><li>define how enums and other primitive value types work within the rest of the application</li><li>define custom functionality for common operators like addition and equality</li></ul>,define custom functionality for common operators like addition and equality<br><br>[Official documentation: Operator overloading](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading)<br>
<b> What it the main purpose of LINQ?</b><br><ul><li>to delete duplicate data</li><li>to bind namespaces and assemblies</li><li>to query and transform data</li><li>to connect assemblies</li></ul>,to query and transform data<br><br>[Official documentation: Language Integrated Query (LINQ) Overview](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/#query-expression-overview)<br>
<b> What is the correct syntax for a new generic list of strings named contacts?</b><br><ul><li>public List<string names> contacts = new List<string names>();</li><li>public List(string names) contacts = new List(string names)();</li><li>var contacts = new List<string>();</li><li>var contacts = new List(string);</li></ul>,var contacts = new List<string>();<br><br>[Official documentation: List<T> Class](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0)<br>
"<b> What is the difference between throw exceptions and throw clauses?</b><br><ul><li>Throw clauses fire only at runtime, while throw exceptions can fire at any time.</li><li>Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.</li><li>Throw clauses overwrite the stack trace, while throw exceptions retain the stack information.</li><li>Throw exceptions fire only at runtime, while throw clauses can fire during compile time.</li></ul>","Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.<br><br>[Official documentation: throw](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw)<br>[c-sharpcorner: Difference Between Throw Exception and Throw Clause](https://www.c-sharpcorner.com/UploadFile/akkiraju/difference-between-throw-exception-and-throw-clause/)<br>"
"<b> When an asynchronous method is executed, the code runs but nothing happens other than a compiler warning. What is most likely causing the method to not return anything?</b><br><ul><li>The return yield statement is missing at the end of the method.</li><li>The method is missing an await keyword in its body.</li><li>The wait keyword is missing from the end of the method.</li><li>The yield keyword is missing from the method.</li></ul>",The method is missing an await keyword in its body.
"<b> What are C# events?</b><br><ul><li>system actions that communicate directly with the compiler at runtime</li><li>actions that execute when the code compiles, generating logs and test output</li><li>actions that generate notifications, which are sent to their registered listeners</li><li>user-only methods that send data to the application's back end</li></ul>","actions that generate notifications, which are sent to their registered listeners<br><br>[Official documentation: Introduction to events](https://docs.microsoft.com/en-us/dotnet/csharp/events-overview)<br>"
"<b> What kind of values can arrays store?</b><br><ul><li>unordered collections of numerc values</li><li>key-value pairs of any C# supported type</li><li>class and struct instances</li><li>multiple variables, or collections, of the same type</li></ul>","multiple variables, or collections, of the same type<br><br>[Official documentation: Arrays](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/)<br>"
"<b> Given this enumeration, how would you access the integer-type value of 'AppState.Loading'?</b><br><br>`enum AppState { OffLine, Loading, Ready }`<br><br><ul><li>string currentState = (string)AppState.Loading;</li><li>string currentState = AppState.Loading.integralVal;</li><li>int currentState = AppState.Loading.rawValue;</li><li>int currentState = (int)AppState.Loading;</li></ul>",int currentState = (int)AppState.Loading;<br><br>[Official documentation: Enumeration types](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#conversions)<br>
<b> What character would you use to start a regular expression pattern at a word boundary?</b><br><ul><li>d</li><li>\a</li><li>\b</li><li>\w</li></ul>,\b<br><br>[regular-expressions: Word Boundaries](https://www.regular-expressions.info/wordboundaries.html)<br>[Official documentation: Regular Expression Language - Quick Reference](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference)<br>
"<b> To conform to the following interface, which of its members need to be implemented?</b><br><br>```cs<br>public interface INameble<br>{<br>string FirstName { get; set; }<br>string LastName { get; }<br>}<br>```<br><br><ul><li>Both the FirstName and LastName properties need to be implemented.</li><li>Neither, they are both optional.</li><li>Only the LastName property needs to be implemented.</li><li>Only the FirstName property needs to be implemented.</li></ul>",Both the FirstName and LastName properties need to be implemented.<br><br>[Official documentation: interface](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface)<br>
"<b> You're dealing with multiple assemblies in your program, but are worried about memory allocation. At what point in the program life cycle are assemblies loaded into memory?</b><br><ul><li>at runtime</li><li>at compile time</li><li>only when required</li><li>only when programmatically loaded</li></ul>",only when required
<b> What is most accurate description of a regular expression?</b><br><ul><li>A regular expression is a C# tool used to parse HTML</li><li>A regular expression is a special text string for describing a search patters.</li><li>A regular expression allows a variable to be passed by reference.</li><li>A regular expression allows a class to conform to the Equatable protocol.</li></ul>,A regular expression is a special text string for describing a search patters.<br><br>[Official documentation: Regular Expression Language - Quick Reference](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference)<br>[Official documentation: .NET regular expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions)<br>
<b> Why would you use a class field in C#</b><br><ul><li>To define behaviours of the class</li><li>To hold information and data contained in the class object</li><li>To communicate between classes and object</li><li>To store the class definition value</li></ul>,To hold information and data contained in the class object<br><br>[Official documentation: Introduction to classes](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes)<br>
<b> When would you use generics in your code?</b><br><ul><li>to increase code performance</li><li>all of these answers</li><li>when code reuse is a priority</li><li>when type safety is important</li></ul>,all of these answers<br><br>[Official documentation: Generic classes and methods](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/generics)<br>
"<b> What prints to the console when this code is executed?</b><br><br>```cs<br>public delegate void AuthCallback(bool validUser);<br>public static AuthCallback loginCallback = Login;<br>public static void Login()<br>{<br>Console.WriteLine(""Valid user!"");<br>}<br>public static void Main(string[] args)<br>{<br>loginCallback(true);<br>}<br>```<br><br><ul><li>Login successful...</li><li>Valid user!</li><li>an error, because the method signature of Login doesn't match the delegate</li><li>Login successful... Valid user!</li></ul>","an error, because the method signature of Login doesn't match the delegate<br><br>[Official documentation: Introduction to Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/delegates-overview)<br>[Official documentation: Introduction to Events](https://docs.microsoft.com/en-us/dotnet/csharp/events-overview)<br>"
<b> How would you declare a sealed class named User?</b><br><ul><li>public class User {}</li><li>abstract User {}</li><li>sealed class User {}</li><li>private sealed class User {}</li></ul>,sealed class User {}<br><br>[Official documentation: Abstract and Sealed Classes and Class Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members)<br>
"<b> What is the difference between non-static and static classes?</b><br><ul><li>non-static classes need to be initialized before use, while static classes do not</li><li>non-static classes are accessible only from an interface while static classes are accessible from anywhere</li><li>non-static classes need to initialize all class members at runtime, while static classes do not</li><li>non-static classes do not need to be initialized while static classes do</li></ul>","non-static classes need to be initialized before use, while static classes do not<br><br>[stackoverflow](https://stackoverflow.com/questions/20451554/whats-the-function-of-a-static-constructor-in-a-non-static-class)<br>[Official documentation: Static Constructors](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors)<br>"
"<b> Which characteristic prevents this code from compiling?</b><br><br>`public int age=""28""`<br><br><ul><li>type safety</li><li>single inheritance</li><li>dependency injection</li><li>multiple inheritance</li></ul>",type safety<br><br>[c-sharpcorner: Type Safety in .NET](https://www.c-sharpcorner.com/UploadFile/vikie4u/type-safety-in-net/)<br>
<b> How would you serialize this class?</b><br><br>`public class User {}`<br><br><ul><li>Mark the User class with the `DeserializableAttribute`.</li><li>Declare the class as `public serializable class User {}`.</li><li>Mark the User class with the `SerializableAttribute` attribute.</li><li>Declare the class as `private serializable class User {}`.</li></ul>,Mark the User class with the `SerializableAttribute` attribute.<br><br>[Official documentation: SerializableAttribute Class](https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute?view=net-5.0)<br>
<b> How would you write a delegate named ResultCallback with an int parameter named responseCode?</b><br><ul><li>public delegate ResultCallback(int responseCode);</li><li>public delegate void ResultCallback<(int) responseCode>;</li><li>public void delegate ResultCallback\<int responseCode\>;</li><li>public delegate void ResultCallback(int responseCode);</li></ul>,public delegate void ResultCallback(int responseCode);<br><br>[Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/)<br>
<b> What is the difference between a static and non-static method?</b><br><ul><li>non-static methods always need to have a void return type</li><li>non-static methods do not have access to static member variables</li><li>static methods do not have to instantiate an instance of the class to call the method</li><li>static methods always have to be public</li></ul>,static methods do not have to instantiate an instance of the class to call the method<br><br>[Official documentation: Static Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members#static-members)<br>
<b> What is the correct way to write an event named apiResult based on a delegate named ResultCallback?</b><br><ul><li>public void event ResultCallback apiResult;</li><li>public event ResultCallback(() -> apiResult);</li><li>public event void ResultCallback</li><li>public event ResultCallback apiResult;</li></ul>,public event ResultCallback apiResult;<br><br>[Official documentation: Introduction to events](https://docs.microsoft.com/en-us/dotnet/csharp/events-overview)<br>
"<b> When will the code inside finally block be executed in a try-catch statement?</b><br><ul><li>if there is an error, it won't execute at all</li><li>between the try and catch blocks</li><li>after the try and catch blocks</li><li>when the finally block overrides the catch block and executes in its place</li></ul>",after the try and catch blocks<br><br>[Official documentation: try-catch](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch)<br>
"<b> What method correctly extends the string class?</b><br><ul><li>public static string IsvalidName(this string i, string value) {}</li><li>public static void IsvalidName(this string i, string value) {}</li><li>public string IsvalidName(this string i, string value) {}</li><li>public void IsvalidName(this string i, string value) {}</li></ul>","public static string IsvalidName(this string i, string value) {}"
<b> How are C# classses limited?</b><br><ul><li>They do not support multiple inheritance.</li><li>They support multiple inheritance.</li><li>They can have only a set number of properties.</li><li>They can have only a set number of methods.</li></ul>,They do not support multiple inheritance.<br><br>[Official documentation: Class inheritance](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes#class-inheritance)<br>
"<b> What function do namespaces perform?</b><br><ul><li>Namespaces calculate code coverage at runtime.</li><li>Namespaces compile application code together at compile time.</li><li>Namespaces group code together into a single repository.</li><li>Namespaces separate code into groupings, control access, and void naming collisions.</li></ul>","Namespaces separate code into groupings, control access, and void naming collisions.<br><br>[Official documentation: namespace](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/namespace)<br>"
<b> What is the correct way to write a public property with a private backing field?</b><br><br>- [ ]<br>```cs<br>private int _password;<br>pubic int Password = { get; set; }<br>```<br>- [ ]<br>```cs<br>private int _password;<br>public int Password = _password;<br>```<br>- [ ]<br>```cs<br>private int _password;<br>public int Password<br>{<br>get -> _password;<br>set-> _password = value;<br>}<br>```<br>- [x]<br>```cs<br>private int _password;<br>public int Password<br>{<br>get { return _password; }<br>set { _password = value; }<br>}<br>```<br>[Official documentation: Using Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties)<br><br><ul></ul>,No answer found
<b> What is a thread pool?</b><br><ul><li>a collection of synchronous methods created during initialization that cannot be reused</li><li>a collection of threads created during initialization that can be reused</li><li>a collection of threads only recognized at compile time that can be reused</li><li>a collection of asynchronous methods created at compile time that cannot be reused</li></ul>,a collection of threads created during initialization that can be reused<br><br>[Official documentation: ThreadPool Class](https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool?view=net-5.0)<br>
"<b> When an object in C# is serialized, what is it converted to?</b><br><ul><li>XML</li><li>JSON</li><li>byte stream</li><li>value stream</li></ul>",byte stream<br><br>[Official documentation: Serialization](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/serialization/)<br>
<b> What is a delegate</b><br><ul><li>a variable that holds a reference to a value type and its content</li><li>a specific value type that can be used only in callback methods</li><li>a type that holds a reference to a method with a particular parameter list and return type</li><li>a custom variable type that can be used in abstract classes</li></ul>,a type that holds a reference to a method with a particular parameter list and return type<br><br>[Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/)<br>
"<b> What are the four keywords associated with exception handling in C#?</b><br><ul><li>try, catch, valid, invalid</li><li>try, valid, finally, throw</li><li>try, catch, finally, throw</li><li>finally, throw, valid, invalid</li></ul>","try, catch, finally, throw<br><br>[Tutorial Point](https://www.tutorialspoint.com/csharp/csharp_exception_handling.htm#:~:text=Exceptions%20provide%20a%20way%20to,catch%2C%20finally%2C%20and%20throw.)<br>"
"<b> What is the main difference between the is and as operators?</b><br><ul><li>The is operator checks instance types, while the as operator checks the inherited type.</li><li>The is operator checks primitive data types, while the as operator checks the object type.</li><li>The as operator checks object type, while the is operator attempts to cast an object to a specific type.</li><li>The is operator checks object type, while the as operator attempts to cast an object to a specific type.</li></ul>","The is operator checks object type, while the as operator attempts to cast an object to a specific type.<br><br>[Pluralsight guide](https://www.pluralsight.com/guides/csharp-is-as-operators-is-expressions)<br>"
"<b> What is the difference between finally and finalize blocks?</b><br><ul><li>The finally block is called during the execution of a try and catch block, while the finalize method is called after garbage collection.</li><li>The finally block is called after the execution of a try and catch block, while the finalize method is called just before garbage collection.</li><li>The finalize block is called before the execution of a try and catch block, while the finally method is called just before garbage collection.</li><li>The finalize block is called during the execution of a try and catch block, while the finally method is called after garbage collection.</li></ul>","The finally block is called after the execution of a try and catch block, while the finalize method is called just before garbage collection.<br><br>[C-sharpcorner](https://www.c-sharpcorner.com/forums/final-finally-and-finalize)<br>"
"<b> Your application has a value type called username that needs to be able to accept null values, but this is generating compile-time errors. How would you fix this in code?</b><br><ul><li>Null<string> username = null;</li><li>string? username = null;</li><li>Type<string>? username = null;</li><li>Optional<string> username = null;</li></ul>",string? username = null;
<b> Which code snippet correctly declares a custom exception named InvalidResponse?</b><br><ul><li>struct InvalidResponse: Exception {}</li><li>class InvalidResponse: Exception {}</li><li>public Exception InvalidResponse = new Exception ();</li><li>public Exception InvalidResponse () -> Exception;</li></ul>,class InvalidResponse: Exception {}<br><br>[Official documentation: Exceptions](https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions)<br>
"<b> How would you write an enum variable called AppState with values for Offline, Loading, and Ready?</b><br><ul><li>enum AppState = [Offline, Loading, Ready]</li><li>enum AppState {""Offline"", ""Loading"", ""Ready""}</li><li>enum AppState = {Offline, Loading, Ready}</li><li>enum AppState {Offline, Loading, Ready}</li></ul>","enum AppState {Offline, Loading, Ready}<br><br>[Official documentation: Enum](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum)<br>"
"<b> What is the main difference between a value type and a reference type?</b><br><ul><li>A value type can be any primitive type, while reference types must be type-agnostic.</li><li>A value type refers to another value, while a reference type refers to a value in memory.</li><li>A value type stores an actual value, while a reference type is a pointer to a value.</li><li>A value type is available only at runtime, while a reference type is available only at compile time.</li></ul>","A value type stores an actual value, while a reference type is a pointer to a value.<br><br>[Official documentation: Value types](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types)<br>[Official documentation: Reference types](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types)<br>"
"<b> What is the difference between the `break` and `continue` keywords?</b><br><ul><li>The `break` keyword is used to break out of multiple iteration statements, while `continue` can only break out of code blocks that have single iterations.</li><li>The `break` keyword literally breaks out of a control flow statement, while `continue` ignores the rest of the control statement or iteration and starts the next one.</li><li>The `break` keyword literally breaks out of the current control flow code and stops it dead, while `continue` keeps executing the code after an exception is thrown.</li><li>The `break` keyword jumps out of an iteration and then proceeds with the rest of the control flow code, while `continue` stops the executing code dead.</li></ul>","The `break` keyword literally breaks out of a control flow statement, while `continue` ignores the rest of the control statement or iteration and starts the next one.<br><br>[Official documentation: Jump statements](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements)<br>"
"<b> Which code snippet correctly declares a variable named userId with a public `get` and private `set`?</b><br><ul><li>`public int userID <get, set>;`</li><li>`public int userID [get, private set];`</li><li>`public int userID { get; private set; }`</li><li>`public int userID = { public get, private set };`</li></ul>",`public int userID { get; private set; }`<br><br>[Official documentation: Properties](https://docs.microsoft.com/en-us/dotnet/csharp/properties)<br>
<b> What is true about virtual methods?</b><br><ul><li>`Overriding virtual methods in a derived class is mandatory.`</li><li>`Overriding virtual methods in a derived class is not possible.`</li><li>`Virtual methods always need a default implementation.`</li><li>`Virtual methods cannot have default implementation.`</li></ul>,`Virtual methods always need a default implementation.`<br><br>[Official documentation: virtual](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual)<br>[c-sharpcorner: Virtual Method in C#](https://www.c-sharpcorner.com/UploadFile/3d39b4/virtual-method-in-C-Sharp/)<br>
"<b> What is likely to happen if you have multiple threads accessing the same resource in your program?</b><br><ul><li>`resource overload`</li><li>`thread jumping`</li><li>`deadlock and race conditions`</li><li>`nothing, since this is what threading is for`</li></ul>",No answer found
<b> How do you indicate that a string might be null?</b><br><ul><li>`A string cannot be nullable.`</li><li>`string? myVariable`</li><li>`string myVariable = null`</li><li>`string(null) myVariable`</li></ul>,`string? myVariable`
"<b> Do you need to declare an out variable before you use it?</b><br><ul><li>`No, you can declare it in the parameter list.`</li><li>`Out variables are no longer part of C#.`</li><li>`You must declare it if it is a primitive type.`</li><li>`Yes.`</li></ul>","`No, you can declare it in the parameter list.`"
<b> How would you access the last two people in an array named People?</b><br><ul><li>`People[..^2]`</li><li>`You cannot do this in C#.`</li><li>`People[..^3]`</li><li>`People[^2]`</li></ul>,`People[..^2]`<br><br>[Official Documentation: Ranges](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges)<br>
<b> When can anonymous types be created?</b><br><ul><li>`at compile time`</li><li>`after runtime`</li><li>`at runtime`</li><li>`after compile time`</li></ul>,`at compile time`<br><br>[C-sharpcorner: Anonymous Types](https://www.c-sharpcorner.com/UploadFile/ff2f08/anonymous-types-in-C-Sharp/)<br>
