[
    {
        "front": "<b>Q1. What is the value of s?</b>\n```\nNSMutableString *s = [NSMutableString stringWithString: @\"123\"];\n[s appendString: @\"456\"];\n```\n- 123456\n- 123\n- 123\n- 456\n- This code contains an error.",
        "back": "123456"
    },
    {
        "front": "<b>Q2. What's the value of i after these statements?</b>\n```\nNSString *str = nil;\nNSInteger i = str.integerValue;\n```\n- nil\n- 0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)\n- -1\n- This code crashes.",
        "back": "0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)"
    },
    {
        "front": "<b>Q3. What value is in str after this line in executed?</b>\n`NSString str = \"test\" + \" \" + \"more\";`\n- This code contains an error\n- test\n- nil\n- test more",
        "back": "This code contains an error"
    },
    {
        "front": "<b>Q4. What does this code print?</b>\n```\n    NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\n      return evaluatedObject.intValue % 2 == 0;\n    }];\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\n    NSLog(@\"%@\", n2.firstObject);\n```\n- 2\n- 1,2,3\n- 1,2\n- Nothing, since this code contains an error.",
        "back": "2"
    },
    {
        "front": "<b>Q5. Property defaults include \\_?</b>\n- atomic/strong\n- atomic/weak\n- nonatomic/weak\n- nonatomic/strong",
        "back": "atomic/strong"
    },
    {
        "front": "<b>Q6. What is the key difference between NSDictionary and NSMutableDictionary?</b>\n- NSMutableDictionary's values can change\n- NSMutableDictionary has not initializers.\n- NSDictionary can't be copied.\n- NSDictionary's values can change.",
        "back": "NSMutableDictionary's values can change"
    },
    {
        "front": "<b>Q7. What is foo?</b>\n`-(float)foo;`\n- A function with a return type of float.\n- This code contains an error.\n- A variable declaration of type float.\n- A property of type float.",
        "back": "A function with a return type of float."
    },
    {
        "front": "<b>Q8. What can you glean from this line?</b>\n`#import \"NSString+NameHelper.h\"`\n- NameHelper is a category of NSString.\n- NameHelper is a subclass of NSString.\n- NSString implements the NameHelper protocol.\n- NSString has a helper class.",
        "back": "NameHelper is a category of NSString."
    },
    {
        "front": "<b>Q9. What's wrong with this code?</b>\n`float x = 5.;`\n- Nothing is wrong with this code.\n- Declarations do not need semicolons.\n- x=5 is an invalid float.\n- Variables can't be declared and initialized in the same state.",
        "back": "Nothing is wrong with this code."
    },
    {
        "front": "<b>Q10. How many times with this loop be executed?</b>\n```\nfor (int x=0; x<100; x++) {\n  x = x + 1;\n}\n```\n- 50\n- 99\n- 100\n- This code contains an error.",
        "back": "50"
    },
    {
        "front": "<b>Q11. What is this code an example of?</b>\n`[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];`\n- Key-Value Observing\n- Class Value Observing\n- Key-Data Observing\n- KeyPath Observing",
        "back": "Key-Value Observing"
    },
    {
        "front": "<b>Q12. What does ARC stand for?</b>\n- Automatic Reference Counting\n- Automatic Retain Checking\n- Async Retain Cycles\n- Automatic Release Code",
        "back": "Automatic Reference Counting"
    },
    {
        "front": "<b>Q13. What is printed for this code?</b>\n```\nint val = 0;\nval = 1.5;\nprintf(\"%d\", val);\n```\n- 1\n- 2\n- 0\n- This code contains an error.",
        "back": "1"
    },
    {
        "front": "<b>Q14. What best describes class inheritance in Objective-C?</b>\n- single inheritance but multiple protocol implementation\n- Objective-C doesn't support inheritance\n- dual class inheritance\n- unlimited class inheritance and protocol adherence",
        "back": "single inheritance but multiple protocol implementation"
    },
    {
        "front": "<b>Q15. How many keys does this NSDictionary have after this code is executed?</b>\n`NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];`\n- 2\n- 4\n- 5\n- This code contains an error.",
        "back": "2"
    },
    {
        "front": "<b>Q16. What is wrong with this code?</b>\n```\nNSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\n[dict1 setValue:@\"key\" forKey:@\"value\"];\n```\n- The key and value items are mixed\n- Nothing is wrong with it\n- You can't set the capacity of a dictionary\n- NSMutableDictionary doesn't have a :setValue:forKey function.",
        "back": "Nothing is wrong with it"
    },
    {
        "front": "<b>Q17. What is printed from this code?</b>\n```\nNSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);\n```\n- print\n- This code is invalid\n- Nothing is printed from this code.\n- nil",
        "back": "print"
    },
    {
        "front": "<b>Q18. What is different about this function?</b>\n`+(void)doSomething;`\n- It is static\n- It is abstract.\n- It is inline.\n- This code contains an error.",
        "back": "It is static"
    },
    {
        "front": "<b>Q19. Structs can have \\_?</b>\n- functions\n- initializers\n- fields\n- all of these answers",
        "back": "fields"
    },
    {
        "front": "<b>Q20. What is wrong with this code?</b>\n```\n@interface MyClass : NSObject\n    @property (strong, nonatomic, readonly) NSString *name;\n  @end\n```\n- There is nothing wrong with this code.\n- There is not read-only directive.\n- MyClass doesn't implement NSObject.\n- Properties are declared in the implementation.",
        "back": "There is nothing wrong with this code."
    },
    {
        "front": "<b>Q21. What is an enums base type for the code below?</b>\n`typedef enum { Foo1, Foo2} Foo;`\n- There is no base type.\n- NSObject\n- int\n- NSNumber",
        "back": "There is no base type."
    },
    {
        "front": "<b>Q22. If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?</b>\n- UserDefaults\n- plist file\n- CoreData\n- TextFile",
        "back": "UserDefaults"
    },
    {
        "front": "<b>Q23. What are categories used for?</b>\n- to extend other classes\n- to manage access control\n- to coordinate objects\n- to group classes",
        "back": "to extend other classes"
    },
    {
        "front": "<b>Q24. What is this Objective-C code checking?</b>\n```\nif ([keyPath isInstanceOf:[NSString class]]) {\n}\n```\n- This code contains an error\n- if keyPath is an instance of NSString\n- if keyPath's baseclass is the same as NSString's baseclass\n- if keyPath implements the same methods as NSString",
        "back": "This code contains an error"
    },
    {
        "front": "<b>Q25. What is this a declaration of?</b>\n`int(^foo)(int);`\n- an Extension\n- a Generic\n- a block of code\n- an abstract class",
        "back": "a block of code"
    },
    {
        "front": "<b>Q26. For observing changes to a property, which of these two statements cause the related method to be called and why?</b>\n```\n1. _val = 1;\n2. self.val= 100;\n```\n- Statement 2, since it calls the auto-created setter on the property.\n- Statement 1, since it uses the property directly.\n- Statement 2, since it specifies the class instance to use.\n- Statement 1, since it calls the auto-created setter on the property.",
        "back": "Statement 2, since it calls the auto-created setter on the property."
    },
    {
        "front": "<b>Q27. What is wrong with this code?</b>\n```\nfloat x = 2.0;\nint(^foo)(int) = ^(int n1) {\n  return (int)(n1*x);\n};\nfoo(5);\n```\n- Ints and floats can't be multiplied.\n- The parameter isn't declared correctly.\n- x is not in the right scope.\n- Nothing is wrong with this code.",
        "back": "Nothing is wrong with this code."
    },
    {
        "front": "<b>Q28. What's the difference between an array and a set?</b>\n- Arrays are ordered, non-unique values.\n- Arrays are stored sorted.\n- Sets are ordered, unique values.\n- Sets can contain nils.",
        "back": "Arrays are ordered, non-unique values."
    },
    {
        "front": "<b>Q29. Dot notation can be used for \\_?</b>\n- nothing, as they're never used in Objective-C\n- function calls only\n- property getter/setter\n- parameter delimiters",
        "back": "property getter/setter"
    },
    {
        "front": "<b>Q30. What is the value of newVals after this code is executed?</b>\n```\nNSArray *vals = @[@\"1\", @\"2\", @\"3\"];\nNSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\nNSArray *newVals = [vals filteredArrayUsingPredicate:pred];\n```\n- 2,3\n- nil\n- This code contains an error\n- 2,\"3\"",
        "back": "2,3"
    },
    {
        "front": "<b>Q31. How would this function be called?</b>\n`-(int)foo:(int)a b:(int)c;`\n- self.foo(5, b:10);\n- This code contains an error.\n- [self foo:5:10:20];\n- [self foo:5 b:10];",
        "back": "[self foo:5 b:10];"
    },
    {
        "front": "<b>Q32. What is the type of the error return value stored in json?</b>\n```\nNSError *error;\nNSData *data;\nid json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];\n```\n- NSString\n- NSArray\n- id\n- NSDictionary",
        "back": "id"
    },
    {
        "front": "<b>Q33. What is significant about this function declaration?</b>\n```\n-(void)testFunc:(NSString**)str;\n```\n- The parameter is passed by value and can not be changed\n- \\*\\* is not allowed on a parameter\n- The parameter may be nil\n- The parameter is passed by reference and may be changed",
        "back": "The parameter is passed by reference and may be changed"
    },
    {
        "front": "<b>Q34. What is printed from this code execution?</b>\n```\ntypedef enum {\n    thing1,\n    thing2,\n    thing3\n} Thing;\n-(void) enumStuff {\n    NSLog(@\"%d\", thing2);\n}\n```\n- 0\n- 1\n- thing2\n- This code does not print anything",
        "back": "1"
    },
    {
        "front": "<b>Q35. You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?</b>\n- non-atomic\n- strong\n- weak\n- atomic",
        "back": "atomic"
    },
    {
        "front": "<b>Q36. What is wrong with this line of code?</b>\n```\nint temp = 1==1;\n```\n- `temp` is a keyword.\n- 1==1 is invalid.\n- 1==1 evaluates to a Boolean.\n- Nothing is wrong with it.",
        "back": "Nothing is wrong with it."
    },
    {
        "front": "<b>Q37. What is special about the code within this block?</b>\n```\ndispatch_async(dispatch_get_main_queue(), ^{\n// code\n});\n```\n- It executes on the main queue.\n- It is the last code to run before the app goes inactive.\n- It executes on a background thread.\n- It is queued to execute in the background.",
        "back": "It executes on the main queue."
    },
    {
        "front": "<b>Q38. How many items are in set1 after this code executes?</b>\n```\nNSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\n[set1 add0bject:@3];\n```\n- zero\n- six\n- one\n- five",
        "back": "five"
    },
    {
        "front": "<b>Q39. What is wrong with this code?</b>\n```\nNSDictionary *d1 = @[@\"v1\", @4, @\"v2\", @5.6, @\"v3\"];\nNSlog(@\"d1: %@\", d1);\n```\n- NSDictionary cannot be printed this way.\n- The last key is missing a value.\n- Dictionaries cannot have mixed types as values.\n- d1 is assigned an NSArray of values.",
        "back": "The last key is missing a value."
    },
    {
        "front": "<b>Q40. What is the initial value of the property `val`?</b>\n```\n@property (nonatomic, readonly) int val;\n```\n- 8\n- nil\n- -1\n- undefined",
        "back": "undefined"
    },
    {
        "front": "<b>Q41. Which thread should UI updates be processed on to avoid crashes and application lag?</b>\n- UI\n- dispatch\n- background\n- main",
        "back": "UI"
    },
    {
        "front": "<b>Q42. What is the value of val after this code is executed?</b>\n```\nNSString *val = @\"1.23\";\nBOOL tf = val.boolValue;\n```\n- This code is invalid\n- YES\n- NO\n- 1",
        "back": "NO"
    },
    {
        "front": "<b>Q43. In this code, what does ThatOne refer to?</b>\n```\n@interface TestClass : ThisOne <ThatOne>\n```\n- the parent class of TestClass \n- the name of the category being created for ThisOne\n- a protocoL impLemented by ThisOne\n- a helper file's name",
        "back": "a protocoL impLemented by ThisOne"
    },
    {
        "front": "<b>Q44. What is the value of result after this code is executed? </b>\n```\nNSString *result = [Ftest\"\n    stringByTrimmingCharactersInSet.NSCharacterSet.alphanumericCharacterSet]; \n```\n- \"\" \n- \"es\"\n- \"test\"\n- none of these answers",
        "back": "\"test\""
    },
    {
        "front": "<b>Q45. When will self receive the notification based on this code? </b>\n```\nMyClass .classObj = [[MyClass allot] init];\n[class0bj add0bserver:self forKeyPath:@\"name\"\n              options:NSKeyValueObservingOptionNew context:NULL];\n```\n- none of these answers\n- class0bj will recieve the notification, not self.\n- when class0bj is set to \"name\"\n- when the name property in the class0bj instance changes",
        "back": "when the name property in the class0bj instance changes"
    },
    {
        "front": "<b>Q46. What is wrong with this code? </b>\n```\n[*\"true\" boolValue];\n```\n- String literal are not created with*.\n- NSString doesn't have a boolValue function.\n- \"true\" has no meaning.\n- There is nothing wrong with this code.",
        "back": "NSString doesn't have a boolValue function."
    },
    {
        "front": "<b>Q47. How many times does this loop execute?</b>\n```\nint loopVal = 0;\nfor (int i=0; i>loopVal; i--){\n    i--;\n}\n```\n- an infinite number of times\n- This code is invalid.\n- zero\n- one",
        "back": "zero"
    },
    {
        "front": "<b>Q48. What will this code print?</b>\n```\nNSLog(@\"%lu\", @\"test\".length);\n```\n- \"test\"\n- Nothing, this code is invalid.\n- 4\n- 0",
        "back": "4"
    },
    {
        "front": "<b>Q49. What is the value of numVtoInt after this code is executed?</b>\n```\nNSNumber *numV = [NSNumber numberWithFloat:6.7];\nint numVtoInt = numV.intValue;\n```\n- 6\n- 0\n- 6.7\n- 7",
        "back": "7"
    },
    {
        "front": "<b>Q50. What does this code print?</b>\n```\nNSString *val = @\"1.23\";\nNSLog(@\"%.04f\", val.floatValue);\n```\n- 1.2300\n- .04\n- This code is invalid\n- 1",
        "back": "1.2300"
    },
    {
        "front": "<b>Q51. What is the maximum possible value of r1 in this code?</b>\n```\nint r1 = arc4random() % 10;\n```\n- 0\n- 9\n- 1\n- 10",
        "back": "9"
    }
]