[
    {
        "front": "<b>Q1. How can you minimise all views except for the currently selected view in the Eclipse interface?</b>\n- Press Control-M (Windows) or Command-M (Mac)\n- Double-click the tab you want to maximise\n- all of these answers\n- Click the Maximise button at the top right of the view",
        "back": "all of these answers"
    },
    {
        "front": "<b>Q2. What happens when you execute the Run -> Skip all Breakpoints command?</b>\n- All breakpoints are deleted\n- none of these answers\n- All breakpoints will not be fired when debugging and will not cause application execution to suspend\n- All breakpoints and bookmarks are disabled",
        "back": "All breakpoints will not be fired when debugging and will not cause application execution to suspend"
    },
    {
        "front": "<b>Q3. What is not a key part of Eclipse projects and technologies?</b>\n- Plug-in Development Environment (PDE)\n- Eclipse Project\n- Java Development Toold (JDT)\n- Eclipse .NET",
        "back": "Java Development Toold (JDT)"
    },
    {
        "front": "<b>Q4. Which is a valid way to create a code snippet?</b>\n- Right-click the selected code and select Add to Snippets\n- Drag the code into the snippets view\n- Click Source -> Snippets -> Create Snippet\n- With the code selected, click the + button in the Snippets view",
        "back": "Right-click the selected code and select Add to Snippets"
    },
    {
        "front": "<b>Q5. In this image, what does the circled button do?</b>\n- It expands the comparison between the two files to include whitespace.\n- It allows you to delete the line of code to which it is connected.\n- It allows changes from one version of a file to be applied to another version of the file.\n- It allows you to merge both lines of code together.",
        "back": "It allows changes from one version of a file to be applied to another version of the file."
    },
    {
        "front": "<b>Q6. When inserting a snippet containing variables into a source file, how are values for the variable defined?</b>\n- Eclipse fills them in with a drop-down menu of available optons.\n- They are automatically highlighted in code.\n- They are populated using environment variables.\n- You populate them through a pop-up windows.",
        "back": "They are automatically highlighted in code."
    },
    {
        "front": "<b>Q7. How can you create a new Git branch in Eclipse?</b>\n- all of these answers\n- Right-click your project in the Package Explorer and select Team -> Switch To -> New Branch\n- Click File -> New -> Git -> Branch\n- Click Source -> Team -> Switch To -> New Branch",
        "back": "all of these answers"
    },
    {
        "front": "<b>Q8. Why might you use the Open Type button?</b>\n- to open a file by its name\n- to search the workbench for a class to open in an editor\n- to find a string in a text file\n- to find all places where a certain type is instantiated",
        "back": "to search the workbench for a class to open in an editor"
    },
    {
        "front": "<b>Q9. In the JUnit view, what is the value in the parentheses after a previously run unit test?</b>\n- the number of errors found in the test\n- the time it took the test to run\n- the name of the package containing the test class\n- the test class name",
        "back": "the time it took the test to run"
    },
    {
        "front": "<b>Q10. In this image, what does the circled icon in the Problems view do?</b>\n- It sends the currently selected problem to another view.\n- It indents the currently selected problem.\n- It opens the Filter menu so you can customise what problems are displayed.\n- It jumps to the currently selected problem in the Editor.",
        "back": "It opens the Filter menu so you can customise what problems are displayed."
    },
    {
        "front": "<b>Q11. What can you not do in the Expressions view?</b>\n- track the value of a variable throughout the lifetime of the app.\n- change the name of a variable while debugging.\n- change the value of a final variable while debugging.\n- track values of variables when they are out of scope.",
        "back": "track the value of a variable throughout the lifetime of the app."
    },
    {
        "front": "<b>Q12. Your code is highlighted in red when running code coverage. Why is this?</b>\n- The code is the cause of a compiler warning.\n- The method is unused or causes runtime errors.\n- The code is within an if statement that is always evaluated as true at runtime.\n- No code calls the method.",
        "back": "No code calls the method."
    },
    {
        "front": "<b>Q13. When selecting the Synchronise Workspace option for a project, what perspective is opened?</b>\n- Git\n- Java\n- Team Synchronising\n- Remote Synchronise",
        "back": "Team Synchronising"
    },
    {
        "front": "<b>Q14. Which is not a way to check the value of a variable while debugging?</b>\n- Hover ove the variable in the Editor.\n- Check the Debug view.\n- Check the Variables view.\n- Watch the variable in the Expressions view.",
        "back": "Watch the variable in the Expressions view."
    },
    {
        "front": "<b>Q15. How can you configure Eclipse to open a webpage in a browser outside of Eclipse using the Windows (Eclipse) -> Preferences -> General -> Web Browser dialog page?</b>\n- Select Use external web browser.\n- Select Add a new browser and select the desired browser in the External web browsers menu.\n- Select Use external web browser, click the New or Search button, add your browser, and then select it in the External web browsers menu.\n- Use the Search button to search for an installed web browser.",
        "back": "Select Use external web browser, click the New or Search button, add your browser, and then select it in the External web browsers menu."
    },
    {
        "front": "<b>Q16. What view, within the Team component, displays the commits related to a particular project or file?</b>\n- Git Staging\n- History\n- Synchronize\n- Git Repositories",
        "back": "History"
    },
    {
        "front": "<b>Q17. What is included in your wqorkspace folder?</b>\n- a hidden .metadata folder\n- a hidden .metadata folder and projects imported into the workspace only\n- only projects imported into the workspace\n- a hidden .metadata folder and projects created in the workspace",
        "back": "a hidden .metadata folder and projects created in the workspace"
    },
    {
        "front": "<b>Q18. What can you not do in the Variables view?</b>\n- monitor variables that are outside the scope of the current stack frame\n- set a breakpoint to track a particular instance\n- inspect the values of an object's fields\n- edit the value of a variable while the debugger is running your app",
        "back": "edit the value of a variable while the debugger is running your app"
    },
    {
        "front": "<b>Q19. What is not a method stub that Eclipse will create for you in the New JUnit Test Case window?</b>\n- tearDown()\n- setUpClass()\n- tearDownAfterClass()\n- setUp()",
        "back": "setUpClass()"
    },
    {
        "front": "<b>Q20. What does the Problems view show?</b>\n- all of the answers\n- warnings and errors\n- code that does not match your formatting settings\n- threads containing errors",
        "back": "all of the answers"
    },
    {
        "front": "<b>Q21. When switching workspaces, what is preserved?</b>\n- all preferences\n- none of these answers\n- the current perspective\n- preferences for a language (e.g., Java)",
        "back": "all preferences"
    },
    {
        "front": "<b>Q22. How can you set files to save automatically when launching an application?</b>\n- Click Window (Eclipse) -> Preferences -> Run/Debug -> Launching, and then select Save required dirty editors before launching.\n- Click Window (Eclipse) -> Preferences -> Java -> Editor -> Save Actions\n- Click File -> Save All.\n- Change the project's run configuration.",
        "back": "Click Window (Eclipse) -> Preferences -> Run/Debug -> Launching, and then select Save required dirty editors before launching."
    },
    {
        "front": "<b>Q23. Which is _not_ a valid way to create a test class?</b>\n- In the **Package Explorer**, right-click a class and select **New > JUnit Test Case**.\n- none of these answers\n- Create a JUnit Test Case class through the **File** menu.\n- Create the class manually while in any perspective.",
        "back": "none of these answers"
    },
    {
        "front": "<b>Q24. What happens when you double-click a Revision Time in the History view?</b>\n- Nothing happens.\n- The select file is opened in the Editor in its state at the time of the revision.\n- The revision opens in a **Split Editor** window alongside the current local revision of the file.\n- A pop-up window showing details about the revision appears.",
        "back": "The select file is opened in the Editor in its state at the time of the revision."
    },
    {
        "front": "<b>Q25. What is the benefit of using perspectives?</b>\n- to switch between preferences within a single workspace\n- to easily switch between different layouts of views in the Workbenchfor specific tasks\n- to manage the fact that some views work only in certain perspectives\n- to debug multiple applications at the same time",
        "back": "to easily switch between different layouts of views in the Workbenchfor specific tasks\n\n[Reference](https://www.eclipse.org/articles/using-perspectives/PerspectiveArticle.html)"
    },
    {
        "front": "<b>Q26. When viewing an XML file in Eclipse, how can you view the file in a visual hierarchy (as opposed to code alone)?</b>\n- You cannot do this in Eclipse.\n- Select the Editor tab for the XML file and then click the Design tab at the bottom of the editor window.\n- Double-click the open tab in the Editor.\n- In the Package Explorer, right-click the file and select Open With > Desgign Editor.",
        "back": ""
    },
    {
        "front": "<b>Q27. How can you view all the commits for a single file?</b>\n- Open the commit in the Git Staging view.\n- Open the commit in the Git Reflog view.\n- Double-click a commit in the History view.\n- Right-click the file in the Package Explorer and select Team > Show in History.",
        "back": "Right-click the file in the Package Explorer and select Team > Show in History."
    },
    {
        "front": "<b>Q28. In the image below, what does the circled button do?</b>\n![image Q28](https://github.com/Beziu/linkedin-skill-assessments-quizzes/blob/master/eclipse/images/Eclipse-Q28.jpg)\n- It links the Editor and Navigator, causing the Editor to switch to the file selected in the Package Explorer and vice versa.\n- It expands Libraries when you are in the Java perspective.\n- It minimizes the left view\n- It collapses open folders in the Package Explorer view.",
        "back": ""
    },
    {
        "front": "<b>Q29. Why might you create multiple debug configurations for the same project?</b>\n- all of these answers\n- to debug using a different JRE\n- to customize environment variables\n- to customize arguments",
        "back": ""
    },
    {
        "front": "<b>Q30. You are searching for code using the Search dialog, and no results appear. What is a likely cause?</b>\n- all of these answers\n- The scope of the search is too narrow.\n- The type of search is not appropriate for the language of the code.\n- There is a typo in the search parameters.",
        "back": ""
    },
    {
        "front": "<b>Q31. If you check out a branch in Eclipse and still see the old code, what is one possible problem?</b>\n- Your project is not using source control.\n- Your internet connection is down.\n- Your Git passwordis incorrect.\n- You need to refresh your project.",
        "back": "Your project is not using source control."
    },
    {
        "front": "<b>Q32. What is required to create a Git commit?</b>\n- all of these answers\n- a local repository\n- staged changes\n- a commit message",
        "back": "all of these answers"
    },
    {
        "front": "<b>Q33. What can you do in the Eclipse Split Editor?</b>\n- view the Design and Source tabs of one XML file at the same time\n- drag code from one Editor pane into another\n- split the editor either horizontally or vertically\n- all of these answers",
        "back": ""
    },
    {
        "front": "<b>Q34. Why might you run the Project > Clean command?</b>\n- to remedy an issue where the source code seemsaccurate, but Git is indicating a merge conflict\n- to remedy syntax errors within the source code, causing the project not to build\n- to discard any existing build state before building the project, which can remedy issues where the source code seems accurate yet fails to build\n- to recompile only the source code files that have changed since the last build, which can shorten the build time for long-running builds",
        "back": ""
    },
    {
        "front": "<b>Q35. How can you terminate debugging in the Debug view?</b>\n- Right-click an item in the stack trace and select Terminate/Disconnect All.\n- all of these answers\n- Right-click your application and select Terminate.\n- Right-click a thread and select Terminate and Remove.",
        "back": ""
    },
    {
        "front": "<b>Q36. How do you connect to and debug a remote Java application/server?</b>\n- Click Run > Debug As > Remote Application.\n- You cannot do this in Eclipse.\n- Create and run a configuration under Run > Debug Configurations > Remote Java Application.\n- Click Run > External Tools.",
        "back": "Create and run a configuration under Run > Debug Configurations > Remote Java Application."
    },
    {
        "front": "<b>Q37. What is the purpose of adding TODO in a comment?</b>\n- It reminds you that you have work to do.\n- Comments starting with TODO are listed in the Tasks view.\n- It creates automated email reminders of remaining tasks.\n- Comments starting with TODO are stored in the Task List view.",
        "back": "Comments starting with TODO are listed in the Tasks view."
    },
    {
        "front": "<b>Q38. When an assert fails where can you view the expected value as compared with the actual value?</b>\n- in the Failure Trace section of the JUnit view\n- in the Debug view\n- in the console\n- in the Outline view",
        "back": "in the Failure Trace section of the JUnit view"
    },
    {
        "front": "<b>Q39. You want to use Bugzilla for managing tasks. What is a prerequisite?</b>\n- Select Bugzilla on the list of repositories in the New Task window.\n- Add Bugzilla as a task repository.\n- Install the Bugzilla plug-in.\n- Create a new local task in the Task List.",
        "back": "Install the Bugzilla plug-in."
    },
    {
        "front": "<b>Q40. Which of these is/are listed when searching via the Quick Access search bar?</b>\n- files in the current workspace\n- all of these answers\n- XML attribute values\n- Java members",
        "back": "all of these answers"
    },
    {
        "front": "<b>Q41. After opening a code file, you notice some of the syntax coloring is missing. What is the most likely problem?</b>\n- The code has an error.\n- The code is in a language that is too new for Eclipse to support.\n- The code has the wrong file delimiters.\n- The perspective you are using is out of date.",
        "back": "The perspective you are using is out of date."
    },
    {
        "front": "<b>Q42. When enabled for a specific section, what do the preferences in Java > Editor > Folding control?</b>\n- They cause the section of the class to be collapsed when opened in a new editor.\n- They cause those members to be placed automatically in a superclass, if present.\n- They cause class members to be automatically ordered in accordance with the preferences.\n- They cause the source code to autoformat as it is written.",
        "back": "They cause the section of the class to be collapsed when opened in a new editor."
    },
    {
        "front": "<b>Q43. How can you specify arguments to be passed to an application or virtual machine when it is launched?</b>\n- Click Run > Junit Configurations > Arguments.\n- Click Run > Run Configurations > Arguments.\n- Right-click the project and select Arguments.\n- Click Run > Debug Configurations > Arguments.",
        "back": "Click Run > Run Configurations > Arguments."
    },
    {
        "front": "<b>Q44. In this image, what does the circled button do?</b>\n![image Q44](https://github.com/Beziu/linkedin-skill-assessments-quizzes/blob/master/eclipse/images/Eclipse-Q44.jpg)\n - [ ] It toggles collapsing and expanding all methods in a file.\n - [x] It toggles block selection mode in the editor.\n - [ ] It toggles showing whitespace in the code.\n - [ ] It toggles word wrap in the file",
        "back": ""
    }
]